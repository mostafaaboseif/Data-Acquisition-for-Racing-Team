
DAQ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080036e8  080036e8  000136e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  08003714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000190  20000078  0800378c  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000208  0800378c  00020208  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001363d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002810  00000000  00000000  000336de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000060bc  00000000  00000000  00035eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008a8  00000000  00000000  0003bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c38  00000000  00000000  0003c858  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000055bc  00000000  00000000  0003d490  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000363f  00000000  00000000  00042a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004608b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ca0  00000000  00000000  00046108  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080036d0 	.word	0x080036d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080036d0 	.word	0x080036d0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__gedf2>:
 80008e4:	f04f 3cff 	mov.w	ip, #4294967295
 80008e8:	e006      	b.n	80008f8 <__cmpdf2+0x4>
 80008ea:	bf00      	nop

080008ec <__ledf2>:
 80008ec:	f04f 0c01 	mov.w	ip, #1
 80008f0:	e002      	b.n	80008f8 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__cmpdf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000904:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800090e:	d01b      	beq.n	8000948 <__cmpdf2+0x54>
 8000910:	b001      	add	sp, #4
 8000912:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000916:	bf0c      	ite	eq
 8000918:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800091c:	ea91 0f03 	teqne	r1, r3
 8000920:	bf02      	ittt	eq
 8000922:	ea90 0f02 	teqeq	r0, r2
 8000926:	2000      	moveq	r0, #0
 8000928:	4770      	bxeq	lr
 800092a:	f110 0f00 	cmn.w	r0, #0
 800092e:	ea91 0f03 	teq	r1, r3
 8000932:	bf58      	it	pl
 8000934:	4299      	cmppl	r1, r3
 8000936:	bf08      	it	eq
 8000938:	4290      	cmpeq	r0, r2
 800093a:	bf2c      	ite	cs
 800093c:	17d8      	asrcs	r0, r3, #31
 800093e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000942:	f040 0001 	orr.w	r0, r0, #1
 8000946:	4770      	bx	lr
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	d102      	bne.n	8000958 <__cmpdf2+0x64>
 8000952:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000956:	d107      	bne.n	8000968 <__cmpdf2+0x74>
 8000958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d1d6      	bne.n	8000910 <__cmpdf2+0x1c>
 8000962:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000966:	d0d3      	beq.n	8000910 <__cmpdf2+0x1c>
 8000968:	f85d 0b04 	ldr.w	r0, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop

08000970 <__aeabi_cdrcmple>:
 8000970:	4684      	mov	ip, r0
 8000972:	4610      	mov	r0, r2
 8000974:	4662      	mov	r2, ip
 8000976:	468c      	mov	ip, r1
 8000978:	4619      	mov	r1, r3
 800097a:	4663      	mov	r3, ip
 800097c:	e000      	b.n	8000980 <__aeabi_cdcmpeq>
 800097e:	bf00      	nop

08000980 <__aeabi_cdcmpeq>:
 8000980:	b501      	push	{r0, lr}
 8000982:	f7ff ffb7 	bl	80008f4 <__cmpdf2>
 8000986:	2800      	cmp	r0, #0
 8000988:	bf48      	it	mi
 800098a:	f110 0f00 	cmnmi.w	r0, #0
 800098e:	bd01      	pop	{r0, pc}

08000990 <__aeabi_dcmpeq>:
 8000990:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000994:	f7ff fff4 	bl	8000980 <__aeabi_cdcmpeq>
 8000998:	bf0c      	ite	eq
 800099a:	2001      	moveq	r0, #1
 800099c:	2000      	movne	r0, #0
 800099e:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a2:	bf00      	nop

080009a4 <__aeabi_dcmplt>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff ffea 	bl	8000980 <__aeabi_cdcmpeq>
 80009ac:	bf34      	ite	cc
 80009ae:	2001      	movcc	r0, #1
 80009b0:	2000      	movcs	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmple>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffe0 	bl	8000980 <__aeabi_cdcmpeq>
 80009c0:	bf94      	ite	ls
 80009c2:	2001      	movls	r0, #1
 80009c4:	2000      	movhi	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmpge>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffce 	bl	8000970 <__aeabi_cdrcmple>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpgt>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffc4 	bl	8000970 <__aeabi_cdrcmple>
 80009e8:	bf34      	ite	cc
 80009ea:	2001      	movcc	r0, #1
 80009ec:	2000      	movcs	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpun>:
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d102      	bne.n	8000a04 <__aeabi_dcmpun+0x10>
 80009fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a02:	d10a      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x20>
 8000a0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a12:	d102      	bne.n	8000a1a <__aeabi_dcmpun+0x26>
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	f04f 0001 	mov.w	r0, #1
 8000a1e:	4770      	bx	lr

08000a20 <__aeabi_d2iz>:
 8000a20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d215      	bcs.n	8000a56 <__aeabi_d2iz+0x36>
 8000a2a:	d511      	bpl.n	8000a50 <__aeabi_d2iz+0x30>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d912      	bls.n	8000a5c <__aeabi_d2iz+0x3c>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	bf18      	it	ne
 8000a4c:	4240      	negne	r0, r0
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d105      	bne.n	8000a68 <__aeabi_d2iz+0x48>
 8000a5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	bf08      	it	eq
 8000a62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_d2f>:
 8000a70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a78:	bf24      	itt	cs
 8000a7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a82:	d90d      	bls.n	8000aa0 <__aeabi_d2f+0x30>
 8000a84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a98:	bf08      	it	eq
 8000a9a:	f020 0001 	biceq.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa4:	d121      	bne.n	8000aea <__aeabi_d2f+0x7a>
 8000aa6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aaa:	bfbc      	itt	lt
 8000aac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	4770      	bxlt	lr
 8000ab2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aba:	f1c2 0218 	rsb	r2, r2, #24
 8000abe:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aca:	bf18      	it	ne
 8000acc:	f040 0001 	orrne.w	r0, r0, #1
 8000ad0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000adc:	ea40 000c 	orr.w	r0, r0, ip
 8000ae0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae8:	e7cc      	b.n	8000a84 <__aeabi_d2f+0x14>
 8000aea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aee:	d107      	bne.n	8000b00 <__aeabi_d2f+0x90>
 8000af0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af4:	bf1e      	ittt	ne
 8000af6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afe:	4770      	bxne	lr
 8000b00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_frsub>:
 8000b10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b14:	e002      	b.n	8000b1c <__addsf3>
 8000b16:	bf00      	nop

08000b18 <__aeabi_fsub>:
 8000b18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b1c <__addsf3>:
 8000b1c:	0042      	lsls	r2, r0, #1
 8000b1e:	bf1f      	itttt	ne
 8000b20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b24:	ea92 0f03 	teqne	r2, r3
 8000b28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b30:	d06a      	beq.n	8000c08 <__addsf3+0xec>
 8000b32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3a:	bfc1      	itttt	gt
 8000b3c:	18d2      	addgt	r2, r2, r3
 8000b3e:	4041      	eorgt	r1, r0
 8000b40:	4048      	eorgt	r0, r1
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	bfb8      	it	lt
 8000b46:	425b      	neglt	r3, r3
 8000b48:	2b19      	cmp	r3, #25
 8000b4a:	bf88      	it	hi
 8000b4c:	4770      	bxhi	lr
 8000b4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4240      	negne	r0, r0
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4249      	negne	r1, r1
 8000b6e:	ea92 0f03 	teq	r2, r3
 8000b72:	d03f      	beq.n	8000bf4 <__addsf3+0xd8>
 8000b74:	f1a2 0201 	sub.w	r2, r2, #1
 8000b78:	fa41 fc03 	asr.w	ip, r1, r3
 8000b7c:	eb10 000c 	adds.w	r0, r0, ip
 8000b80:	f1c3 0320 	rsb	r3, r3, #32
 8000b84:	fa01 f103 	lsl.w	r1, r1, r3
 8000b88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	d502      	bpl.n	8000b94 <__addsf3+0x78>
 8000b8e:	4249      	negs	r1, r1
 8000b90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b98:	d313      	bcc.n	8000bc2 <__addsf3+0xa6>
 8000b9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b9e:	d306      	bcc.n	8000bae <__addsf3+0x92>
 8000ba0:	0840      	lsrs	r0, r0, #1
 8000ba2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ba6:	f102 0201 	add.w	r2, r2, #1
 8000baa:	2afe      	cmp	r2, #254	; 0xfe
 8000bac:	d251      	bcs.n	8000c52 <__addsf3+0x136>
 8000bae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bb2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bb6:	bf08      	it	eq
 8000bb8:	f020 0001 	biceq.w	r0, r0, #1
 8000bbc:	ea40 0003 	orr.w	r0, r0, r3
 8000bc0:	4770      	bx	lr
 8000bc2:	0049      	lsls	r1, r1, #1
 8000bc4:	eb40 0000 	adc.w	r0, r0, r0
 8000bc8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	d1ed      	bne.n	8000bae <__addsf3+0x92>
 8000bd2:	fab0 fc80 	clz	ip, r0
 8000bd6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bda:	ebb2 020c 	subs.w	r2, r2, ip
 8000bde:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be2:	bfaa      	itet	ge
 8000be4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be8:	4252      	neglt	r2, r2
 8000bea:	4318      	orrge	r0, r3
 8000bec:	bfbc      	itt	lt
 8000bee:	40d0      	lsrlt	r0, r2
 8000bf0:	4318      	orrlt	r0, r3
 8000bf2:	4770      	bx	lr
 8000bf4:	f092 0f00 	teq	r2, #0
 8000bf8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bfc:	bf06      	itte	eq
 8000bfe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c02:	3201      	addeq	r2, #1
 8000c04:	3b01      	subne	r3, #1
 8000c06:	e7b5      	b.n	8000b74 <__addsf3+0x58>
 8000c08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c10:	bf18      	it	ne
 8000c12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c16:	d021      	beq.n	8000c5c <__addsf3+0x140>
 8000c18:	ea92 0f03 	teq	r2, r3
 8000c1c:	d004      	beq.n	8000c28 <__addsf3+0x10c>
 8000c1e:	f092 0f00 	teq	r2, #0
 8000c22:	bf08      	it	eq
 8000c24:	4608      	moveq	r0, r1
 8000c26:	4770      	bx	lr
 8000c28:	ea90 0f01 	teq	r0, r1
 8000c2c:	bf1c      	itt	ne
 8000c2e:	2000      	movne	r0, #0
 8000c30:	4770      	bxne	lr
 8000c32:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c36:	d104      	bne.n	8000c42 <__addsf3+0x126>
 8000c38:	0040      	lsls	r0, r0, #1
 8000c3a:	bf28      	it	cs
 8000c3c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c40:	4770      	bx	lr
 8000c42:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c46:	bf3c      	itt	cc
 8000c48:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bxcc	lr
 8000c4e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c52:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5a:	4770      	bx	lr
 8000c5c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c60:	bf16      	itet	ne
 8000c62:	4608      	movne	r0, r1
 8000c64:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c68:	4601      	movne	r1, r0
 8000c6a:	0242      	lsls	r2, r0, #9
 8000c6c:	bf06      	itte	eq
 8000c6e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c72:	ea90 0f01 	teqeq	r0, r1
 8000c76:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_ui2f>:
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	e004      	b.n	8000c8c <__aeabi_i2f+0x8>
 8000c82:	bf00      	nop

08000c84 <__aeabi_i2f>:
 8000c84:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c88:	bf48      	it	mi
 8000c8a:	4240      	negmi	r0, r0
 8000c8c:	ea5f 0c00 	movs.w	ip, r0
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c98:	4601      	mov	r1, r0
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	e01c      	b.n	8000cda <__aeabi_l2f+0x2a>

08000ca0 <__aeabi_ul2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e00a      	b.n	8000cc4 <__aeabi_l2f+0x14>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_l2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__aeabi_l2f+0x14>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	ea5f 0c01 	movs.w	ip, r1
 8000cc8:	bf02      	ittt	eq
 8000cca:	4684      	moveq	ip, r0
 8000ccc:	4601      	moveq	r1, r0
 8000cce:	2000      	moveq	r0, #0
 8000cd0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cd4:	bf08      	it	eq
 8000cd6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cda:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cde:	fabc f28c 	clz	r2, ip
 8000ce2:	3a08      	subs	r2, #8
 8000ce4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce8:	db10      	blt.n	8000d0c <__aeabi_l2f+0x5c>
 8000cea:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cee:	4463      	add	r3, ip
 8000cf0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf4:	f1c2 0220 	rsb	r2, r2, #32
 8000cf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000d00:	eb43 0002 	adc.w	r0, r3, r2
 8000d04:	bf08      	it	eq
 8000d06:	f020 0001 	biceq.w	r0, r0, #1
 8000d0a:	4770      	bx	lr
 8000d0c:	f102 0220 	add.w	r2, r2, #32
 8000d10:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d14:	f1c2 0220 	rsb	r2, r2, #32
 8000d18:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d1c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d20:	eb43 0002 	adc.w	r0, r3, r2
 8000d24:	bf08      	it	eq
 8000d26:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2a:	4770      	bx	lr

08000d2c <__aeabi_fmul>:
 8000d2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d34:	bf1e      	ittt	ne
 8000d36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3a:	ea92 0f0c 	teqne	r2, ip
 8000d3e:	ea93 0f0c 	teqne	r3, ip
 8000d42:	d06f      	beq.n	8000e24 <__aeabi_fmul+0xf8>
 8000d44:	441a      	add	r2, r3
 8000d46:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4a:	0240      	lsls	r0, r0, #9
 8000d4c:	bf18      	it	ne
 8000d4e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d52:	d01e      	beq.n	8000d92 <__aeabi_fmul+0x66>
 8000d54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d58:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d5c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d60:	fba0 3101 	umull	r3, r1, r0, r1
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d6c:	bf3e      	ittt	cc
 8000d6e:	0049      	lslcc	r1, r1, #1
 8000d70:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d74:	005b      	lslcc	r3, r3, #1
 8000d76:	ea40 0001 	orr.w	r0, r0, r1
 8000d7a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d7e:	2afd      	cmp	r2, #253	; 0xfd
 8000d80:	d81d      	bhi.n	8000dbe <__aeabi_fmul+0x92>
 8000d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8a:	bf08      	it	eq
 8000d8c:	f020 0001 	biceq.w	r0, r0, #1
 8000d90:	4770      	bx	lr
 8000d92:	f090 0f00 	teq	r0, #0
 8000d96:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9a:	bf08      	it	eq
 8000d9c:	0249      	lsleq	r1, r1, #9
 8000d9e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000da6:	3a7f      	subs	r2, #127	; 0x7f
 8000da8:	bfc2      	ittt	gt
 8000daa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db2:	4770      	bxgt	lr
 8000db4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db8:	f04f 0300 	mov.w	r3, #0
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	dc5d      	bgt.n	8000e7c <__aeabi_fmul+0x150>
 8000dc0:	f112 0f19 	cmn.w	r2, #25
 8000dc4:	bfdc      	itt	le
 8000dc6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dca:	4770      	bxle	lr
 8000dcc:	f1c2 0200 	rsb	r2, r2, #0
 8000dd0:	0041      	lsls	r1, r0, #1
 8000dd2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dd6:	f1c2 0220 	rsb	r2, r2, #32
 8000dda:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dde:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de2:	f140 0000 	adc.w	r0, r0, #0
 8000de6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dea:	bf08      	it	eq
 8000dec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df0:	4770      	bx	lr
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0040      	lsleq	r0, r0, #1
 8000dfe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e02:	3a01      	subeq	r2, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fmul+0xce>
 8000e06:	ea40 000c 	orr.w	r0, r0, ip
 8000e0a:	f093 0f00 	teq	r3, #0
 8000e0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0049      	lsleq	r1, r1, #1
 8000e16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e1a:	3b01      	subeq	r3, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xe6>
 8000e1e:	ea41 010c 	orr.w	r1, r1, ip
 8000e22:	e78f      	b.n	8000d44 <__aeabi_fmul+0x18>
 8000e24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	bf18      	it	ne
 8000e2e:	ea93 0f0c 	teqne	r3, ip
 8000e32:	d00a      	beq.n	8000e4a <__aeabi_fmul+0x11e>
 8000e34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e38:	bf18      	it	ne
 8000e3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	d1d8      	bne.n	8000df2 <__aeabi_fmul+0xc6>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	4770      	bx	lr
 8000e4a:	f090 0f00 	teq	r0, #0
 8000e4e:	bf17      	itett	ne
 8000e50:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e54:	4608      	moveq	r0, r1
 8000e56:	f091 0f00 	teqne	r1, #0
 8000e5a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e5e:	d014      	beq.n	8000e8a <__aeabi_fmul+0x15e>
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d101      	bne.n	8000e6a <__aeabi_fmul+0x13e>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	d10f      	bne.n	8000e8a <__aeabi_fmul+0x15e>
 8000e6a:	ea93 0f0c 	teq	r3, ip
 8000e6e:	d103      	bne.n	8000e78 <__aeabi_fmul+0x14c>
 8000e70:	024b      	lsls	r3, r1, #9
 8000e72:	bf18      	it	ne
 8000e74:	4608      	movne	r0, r1
 8000e76:	d108      	bne.n	8000e8a <__aeabi_fmul+0x15e>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e88:	4770      	bx	lr
 8000e8a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_fdiv>:
 8000e94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e9c:	bf1e      	ittt	ne
 8000e9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea2:	ea92 0f0c 	teqne	r2, ip
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d069      	beq.n	8000f80 <__aeabi_fdiv+0xec>
 8000eac:	eba2 0203 	sub.w	r2, r2, r3
 8000eb0:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb4:	0249      	lsls	r1, r1, #9
 8000eb6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eba:	d037      	beq.n	8000f2c <__aeabi_fdiv+0x98>
 8000ebc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	bf38      	it	cc
 8000ed0:	005b      	lslcc	r3, r3, #1
 8000ed2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ed6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eda:	428b      	cmp	r3, r1
 8000edc:	bf24      	itt	cs
 8000ede:	1a5b      	subcs	r3, r3, r1
 8000ee0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee8:	bf24      	itt	cs
 8000eea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ef6:	bf24      	itt	cs
 8000ef8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000efc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f04:	bf24      	itt	cs
 8000f06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f0e:	011b      	lsls	r3, r3, #4
 8000f10:	bf18      	it	ne
 8000f12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f16:	d1e0      	bne.n	8000eda <__aeabi_fdiv+0x46>
 8000f18:	2afd      	cmp	r2, #253	; 0xfd
 8000f1a:	f63f af50 	bhi.w	8000dbe <__aeabi_fmul+0x92>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f24:	bf08      	it	eq
 8000f26:	f020 0001 	biceq.w	r0, r0, #1
 8000f2a:	4770      	bx	lr
 8000f2c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f34:	327f      	adds	r2, #127	; 0x7f
 8000f36:	bfc2      	ittt	gt
 8000f38:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f40:	4770      	bxgt	lr
 8000f42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	3a01      	subs	r2, #1
 8000f4c:	e737      	b.n	8000dbe <__aeabi_fmul+0x92>
 8000f4e:	f092 0f00 	teq	r2, #0
 8000f52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0040      	lsleq	r0, r0, #1
 8000f5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f5e:	3a01      	subeq	r2, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fdiv+0xc2>
 8000f62:	ea40 000c 	orr.w	r0, r0, ip
 8000f66:	f093 0f00 	teq	r3, #0
 8000f6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0049      	lsleq	r1, r1, #1
 8000f72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f76:	3b01      	subeq	r3, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xda>
 8000f7a:	ea41 010c 	orr.w	r1, r1, ip
 8000f7e:	e795      	b.n	8000eac <__aeabi_fdiv+0x18>
 8000f80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f84:	ea92 0f0c 	teq	r2, ip
 8000f88:	d108      	bne.n	8000f9c <__aeabi_fdiv+0x108>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	f47f af7d 	bne.w	8000e8a <__aeabi_fmul+0x15e>
 8000f90:	ea93 0f0c 	teq	r3, ip
 8000f94:	f47f af70 	bne.w	8000e78 <__aeabi_fmul+0x14c>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e776      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000f9c:	ea93 0f0c 	teq	r3, ip
 8000fa0:	d104      	bne.n	8000fac <__aeabi_fdiv+0x118>
 8000fa2:	024b      	lsls	r3, r1, #9
 8000fa4:	f43f af4c 	beq.w	8000e40 <__aeabi_fmul+0x114>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e76e      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000fac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb0:	bf18      	it	ne
 8000fb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	d1ca      	bne.n	8000f4e <__aeabi_fdiv+0xba>
 8000fb8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fbc:	f47f af5c 	bne.w	8000e78 <__aeabi_fmul+0x14c>
 8000fc0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fc4:	f47f af3c 	bne.w	8000e40 <__aeabi_fmul+0x114>
 8000fc8:	e75f      	b.n	8000e8a <__aeabi_fmul+0x15e>
 8000fca:	bf00      	nop

08000fcc <__aeabi_f2iz>:
 8000fcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fd4:	d30f      	bcc.n	8000ff6 <__aeabi_f2iz+0x2a>
 8000fd6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fda:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fde:	d90d      	bls.n	8000ffc <__aeabi_f2iz+0x30>
 8000fe0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fe8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fec:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff0:	bf18      	it	ne
 8000ff2:	4240      	negne	r0, r0
 8000ff4:	4770      	bx	lr
 8000ff6:	f04f 0000 	mov.w	r0, #0
 8000ffa:	4770      	bx	lr
 8000ffc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001000:	d101      	bne.n	8001006 <__aeabi_f2iz+0x3a>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	d105      	bne.n	8001012 <__aeabi_f2iz+0x46>
 8001006:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800100a:	bf08      	it	eq
 800100c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001010:	4770      	bx	lr
 8001012:	f04f 0000 	mov.w	r0, #0
 8001016:	4770      	bx	lr

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101a:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_InitTick+0x3c>)
{
 800101c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800101e:	7818      	ldrb	r0, [r3, #0]
 8001020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001024:	fbb3 f3f0 	udiv	r3, r3, r0
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <HAL_InitTick+0x40>)
 800102a:	6810      	ldr	r0, [r2, #0]
 800102c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001030:	f000 fb2e 	bl	8001690 <HAL_SYSTICK_Config>
 8001034:	4604      	mov	r4, r0
 8001036:	b958      	cbnz	r0, 8001050 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001038:	2d0f      	cmp	r5, #15
 800103a:	d809      	bhi.n	8001050 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	4602      	mov	r2, r0
 800103e:	4629      	mov	r1, r5
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 fae4 	bl	8001610 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <HAL_InitTick+0x44>)
 800104a:	4620      	mov	r0, r4
 800104c:	601d      	str	r5, [r3, #0]
 800104e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001050:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001052:	bd38      	pop	{r3, r4, r5, pc}
 8001054:	20000000 	.word	0x20000000
 8001058:	2000000c 	.word	0x2000000c
 800105c:	20000004 	.word	0x20000004

08001060 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_Init+0x20>)
{
 8001062:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001066:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106e:	f000 fabd 	bl	80015ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff ffd0 	bl	8001018 <HAL_InitTick>
  HAL_MspInit();
 8001078:	f001 ff2a 	bl	8002ed0 <HAL_MspInit>
}
 800107c:	2000      	movs	r0, #0
 800107e:	bd08      	pop	{r3, pc}
 8001080:	40022000 	.word	0x40022000

08001084 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001084:	4a03      	ldr	r2, [pc, #12]	; (8001094 <HAL_IncTick+0x10>)
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <HAL_IncTick+0x14>)
 8001088:	6811      	ldr	r1, [r2, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	440b      	add	r3, r1
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000110 	.word	0x20000110
 8001098:	20000000 	.word	0x20000000

0800109c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800109c:	4b01      	ldr	r3, [pc, #4]	; (80010a4 <HAL_GetTick+0x8>)
 800109e:	6818      	ldr	r0, [r3, #0]
}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000110 	.word	0x20000110

080010a8 <HAL_ADC_ConvCpltCallback>:
 80010a8:	4770      	bx	lr

080010aa <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 80010ac:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80010ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010b0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80010b4:	d11b      	bne.n	80010ee <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	6892      	ldr	r2, [r2, #8]
 80010c2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80010c6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80010ca:	d10c      	bne.n	80010e6 <ADC_DMAConvCplt+0x3c>
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	b952      	cbnz	r2, 80010e6 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010da:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010dc:	bf5e      	ittt	pl
 80010de:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80010e0:	f042 0201 	orrpl.w	r2, r2, #1
 80010e4:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffde 	bl	80010a8 <HAL_ADC_ConvCpltCallback>
 80010ec:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010ee:	6a1b      	ldr	r3, [r3, #32]
  }
}
 80010f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4718      	bx	r3

080010f8 <HAL_ADC_ConvHalfCpltCallback>:
 80010f8:	4770      	bx	lr

080010fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010fa:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80010fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80010fe:	f7ff fffb 	bl	80010f8 <HAL_ADC_ConvHalfCpltCallback>
 8001102:	bd08      	pop	{r3, pc}

08001104 <HAL_ADC_LevelOutOfWindowCallback>:
 8001104:	4770      	bx	lr

08001106 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001106:	6803      	ldr	r3, [r0, #0]
{
 8001108:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800110a:	685a      	ldr	r2, [r3, #4]
{
 800110c:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800110e:	0690      	lsls	r0, r2, #26
 8001110:	d527      	bpl.n	8001162 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	0791      	lsls	r1, r2, #30
 8001116:	d524      	bpl.n	8001162 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001118:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800111a:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800111c:	bf5e      	ittt	pl
 800111e:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001120:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001124:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800112c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001130:	d110      	bne.n	8001154 <HAL_ADC_IRQHandler+0x4e>
 8001132:	68e2      	ldr	r2, [r4, #12]
 8001134:	b972      	cbnz	r2, 8001154 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	f022 0220 	bic.w	r2, r2, #32
 800113c:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800113e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001148:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800114a:	bf5e      	ittt	pl
 800114c:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800114e:	f043 0301 	orrpl.w	r3, r3, #1
 8001152:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff ffa7 	bl	80010a8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800115a:	f06f 0212 	mvn.w	r2, #18
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	0610      	lsls	r0, r2, #24
 8001168:	d530      	bpl.n	80011cc <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	0751      	lsls	r1, r2, #29
 800116e:	d52d      	bpl.n	80011cc <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001170:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001172:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001174:	bf5e      	ittt	pl
 8001176:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001178:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800117c:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001184:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001188:	d00a      	beq.n	80011a0 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800118a:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800118c:	0550      	lsls	r0, r2, #21
 800118e:	d416      	bmi.n	80011be <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001196:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800119a:	d110      	bne.n	80011be <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800119c:	68e2      	ldr	r2, [r4, #12]
 800119e:	b972      	cbnz	r2, 80011be <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011a6:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011ae:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011b2:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b4:	bf5e      	ittt	pl
 80011b6:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80011b8:	f043 0301 	orrpl.w	r3, r3, #1
 80011bc:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011be:	4620      	mov	r0, r4
 80011c0:	f000 fa12 	bl	80015e8 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80011c4:	f06f 020c 	mvn.w	r2, #12
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	0652      	lsls	r2, r2, #25
 80011d2:	d50d      	bpl.n	80011f0 <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	07db      	lsls	r3, r3, #31
 80011d8:	d50a      	bpl.n	80011f0 <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011dc:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011e4:	f7ff ff8e 	bl	8001104 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011e8:	f06f 0201 	mvn.w	r2, #1
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	bd10      	pop	{r4, pc}

080011f2 <HAL_ADC_ErrorCallback>:
{
 80011f2:	4770      	bx	lr

080011f4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80011f6:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fe:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001200:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001208:	f7ff fff3 	bl	80011f2 <HAL_ADC_ErrorCallback>
 800120c:	bd08      	pop	{r3, pc}
	...

08001210 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8001210:	2300      	movs	r3, #0
{ 
 8001212:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001214:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001216:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800121a:	2b01      	cmp	r3, #1
 800121c:	d074      	beq.n	8001308 <HAL_ADC_ConfigChannel+0xf8>
 800121e:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8001220:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001222:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001226:	2d06      	cmp	r5, #6
 8001228:	6802      	ldr	r2, [r0, #0]
 800122a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800122e:	680c      	ldr	r4, [r1, #0]
 8001230:	d825      	bhi.n	800127e <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001232:	442b      	add	r3, r5
 8001234:	251f      	movs	r5, #31
 8001236:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001238:	3b05      	subs	r3, #5
 800123a:	409d      	lsls	r5, r3
 800123c:	ea26 0505 	bic.w	r5, r6, r5
 8001240:	fa04 f303 	lsl.w	r3, r4, r3
 8001244:	432b      	orrs	r3, r5
 8001246:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001248:	2c09      	cmp	r4, #9
 800124a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800124e:	688d      	ldr	r5, [r1, #8]
 8001250:	d92f      	bls.n	80012b2 <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001252:	2607      	movs	r6, #7
 8001254:	4423      	add	r3, r4
 8001256:	68d1      	ldr	r1, [r2, #12]
 8001258:	3b1e      	subs	r3, #30
 800125a:	409e      	lsls	r6, r3
 800125c:	ea21 0106 	bic.w	r1, r1, r6
 8001260:	fa05 f303 	lsl.w	r3, r5, r3
 8001264:	430b      	orrs	r3, r1
 8001266:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001268:	f1a4 0310 	sub.w	r3, r4, #16
 800126c:	2b01      	cmp	r3, #1
 800126e:	d92b      	bls.n	80012c8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001270:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8001272:	2200      	movs	r2, #0
 8001274:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8001278:	4618      	mov	r0, r3
 800127a:	b002      	add	sp, #8
 800127c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800127e:	2d0c      	cmp	r5, #12
 8001280:	d80b      	bhi.n	800129a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001282:	442b      	add	r3, r5
 8001284:	251f      	movs	r5, #31
 8001286:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001288:	3b23      	subs	r3, #35	; 0x23
 800128a:	409d      	lsls	r5, r3
 800128c:	ea26 0505 	bic.w	r5, r6, r5
 8001290:	fa04 f303 	lsl.w	r3, r4, r3
 8001294:	432b      	orrs	r3, r5
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	e7d6      	b.n	8001248 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800129a:	442b      	add	r3, r5
 800129c:	251f      	movs	r5, #31
 800129e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80012a0:	3b41      	subs	r3, #65	; 0x41
 80012a2:	409d      	lsls	r5, r3
 80012a4:	ea26 0505 	bic.w	r5, r6, r5
 80012a8:	fa04 f303 	lsl.w	r3, r4, r3
 80012ac:	432b      	orrs	r3, r5
 80012ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012b0:	e7ca      	b.n	8001248 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012b2:	2607      	movs	r6, #7
 80012b4:	6911      	ldr	r1, [r2, #16]
 80012b6:	4423      	add	r3, r4
 80012b8:	409e      	lsls	r6, r3
 80012ba:	ea21 0106 	bic.w	r1, r1, r6
 80012be:	fa05 f303 	lsl.w	r3, r5, r3
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6113      	str	r3, [r2, #16]
 80012c6:	e7cf      	b.n	8001268 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_ADC_ConfigChannel+0xfc>)
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d116      	bne.n	80012fc <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012ce:	6893      	ldr	r3, [r2, #8]
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	d4cd      	bmi.n	8001270 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012d4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012d6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012dc:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80012de:	d1c7      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_ADC_ConfigChannel+0x100>)
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <HAL_ADC_ConfigChannel+0x104>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80012ea:	230a      	movs	r3, #10
 80012ec:	4353      	muls	r3, r2
            wait_loop_index--;
 80012ee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80012f0:	9b01      	ldr	r3, [sp, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0bc      	beq.n	8001270 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	e7f8      	b.n	80012ee <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e7b4      	b.n	8001272 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001308:	2302      	movs	r3, #2
 800130a:	e7b5      	b.n	8001278 <HAL_ADC_ConfigChannel+0x68>
 800130c:	40012400 	.word	0x40012400
 8001310:	2000000c 	.word	0x2000000c
 8001314:	000f4240 	.word	0x000f4240

08001318 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001318:	2300      	movs	r3, #0
{
 800131a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800131c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800131e:	6803      	ldr	r3, [r0, #0]
{
 8001320:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	07d2      	lsls	r2, r2, #31
 8001326:	d502      	bpl.n	800132e <ADC_Enable+0x16>
  return HAL_OK;
 8001328:	2000      	movs	r0, #0
}
 800132a:	b002      	add	sp, #8
 800132c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	f042 0201 	orr.w	r2, r2, #1
 8001334:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <ADC_Enable+0x68>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <ADC_Enable+0x6c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001340:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001342:	9b01      	ldr	r3, [sp, #4]
 8001344:	b9c3      	cbnz	r3, 8001378 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001346:	f7ff fea9 	bl	800109c <HAL_GetTick>
 800134a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	689d      	ldr	r5, [r3, #8]
 8001350:	f015 0501 	ands.w	r5, r5, #1
 8001354:	d1e8      	bne.n	8001328 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001356:	f7ff fea1 	bl	800109c <HAL_GetTick>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	2802      	cmp	r0, #2
 800135e:	d9f5      	bls.n	800134c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001360:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001362:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800136e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001376:	e7d8      	b.n	800132a <ADC_Enable+0x12>
      wait_loop_index--;
 8001378:	9b01      	ldr	r3, [sp, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	e7e0      	b.n	8001340 <ADC_Enable+0x28>
 800137e:	bf00      	nop
 8001380:	2000000c 	.word	0x2000000c
 8001384:	000f4240 	.word	0x000f4240

08001388 <HAL_ADC_Start_DMA>:
{
 8001388:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 800138c:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800138e:	4b40      	ldr	r3, [pc, #256]	; (8001490 <HAL_ADC_Start_DMA+0x108>)
 8001390:	6802      	ldr	r2, [r0, #0]
{
 8001392:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001394:	429a      	cmp	r2, r3
{
 8001396:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001398:	d002      	beq.n	80013a0 <HAL_ADC_Start_DMA+0x18>
 800139a:	493e      	ldr	r1, [pc, #248]	; (8001494 <HAL_ADC_Start_DMA+0x10c>)
 800139c:	428a      	cmp	r2, r1
 800139e:	d103      	bne.n	80013a8 <HAL_ADC_Start_DMA+0x20>
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80013a6:	d16e      	bne.n	8001486 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 80013a8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d06c      	beq.n	800148a <HAL_ADC_Start_DMA+0x102>
 80013b0:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 80013b2:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80013b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80013b8:	f7ff ffae 	bl	8001318 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80013bc:	4606      	mov	r6, r0
 80013be:	2800      	cmp	r0, #0
 80013c0:	d15d      	bne.n	800147e <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80013c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013c4:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80013c6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013ca:	4b32      	ldr	r3, [pc, #200]	; (8001494 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80013cc:	f020 0001 	bic.w	r0, r0, #1
 80013d0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013d4:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80013d6:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013d8:	d104      	bne.n	80013e4 <HAL_ADC_Start_DMA+0x5c>
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <HAL_ADC_Start_DMA+0x108>)
 80013dc:	6853      	ldr	r3, [r2, #4]
 80013de:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80013e2:	d13e      	bne.n	8001462 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013ea:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013ec:	684b      	ldr	r3, [r1, #4]
 80013ee:	055a      	lsls	r2, r3, #21
 80013f0:	d505      	bpl.n	80013fe <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013fc:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001400:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001402:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001406:	bf18      	it	ne
 8001408:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800140a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800140c:	bf18      	it	ne
 800140e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001412:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8001414:	2300      	movs	r3, #0
 8001416:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800141c:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800141e:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001420:	4b1e      	ldr	r3, [pc, #120]	; (800149c <HAL_ADC_Start_DMA+0x114>)
 8001422:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_ADC_Start_DMA+0x118>)
 8001426:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001428:	f06f 0302 	mvn.w	r3, #2
 800142c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001430:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800143c:	4643      	mov	r3, r8
 800143e:	f000 f96d 	bl	800171c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800144a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	bf0c      	ite	eq
 8001452:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001456:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 800145a:	609a      	str	r2, [r3, #8]
}
 800145c:	4630      	mov	r0, r6
 800145e:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001462:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001468:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800146a:	6853      	ldr	r3, [r2, #4]
 800146c:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800146e:	bf41      	itttt	mi
 8001470:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8001472:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001476:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800147a:	62a0      	strmi	r0, [r4, #40]	; 0x28
 800147c:	e7bf      	b.n	80013fe <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800147e:	2300      	movs	r3, #0
 8001480:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001484:	e7ea      	b.n	800145c <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8001486:	2601      	movs	r6, #1
 8001488:	e7e8      	b.n	800145c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 800148a:	2602      	movs	r6, #2
 800148c:	e7e6      	b.n	800145c <HAL_ADC_Start_DMA+0xd4>
 800148e:	bf00      	nop
 8001490:	40012400 	.word	0x40012400
 8001494:	40012800 	.word	0x40012800
 8001498:	080010ab 	.word	0x080010ab
 800149c:	080010fb 	.word	0x080010fb
 80014a0:	080011f5 	.word	0x080011f5

080014a4 <ADC_ConversionStop_Disable>:
{
 80014a4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014a6:	6803      	ldr	r3, [r0, #0]
{
 80014a8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	07d2      	lsls	r2, r2, #31
 80014ae:	d401      	bmi.n	80014b4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 80014b0:	2000      	movs	r0, #0
 80014b2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80014bc:	f7ff fdee 	bl	800109c <HAL_GetTick>
 80014c0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014c2:	6823      	ldr	r3, [r4, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	07db      	lsls	r3, r3, #31
 80014c8:	d5f2      	bpl.n	80014b0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014ca:	f7ff fde7 	bl	800109c <HAL_GetTick>
 80014ce:	1b40      	subs	r0, r0, r5
 80014d0:	2802      	cmp	r0, #2
 80014d2:	d9f6      	bls.n	80014c2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014e6:	bd38      	pop	{r3, r4, r5, pc}

080014e8 <HAL_ADC_Init>:
{
 80014e8:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80014ea:	4604      	mov	r4, r0
 80014ec:	2800      	cmp	r0, #0
 80014ee:	d071      	beq.n	80015d4 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014f2:	b923      	cbnz	r3, 80014fe <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80014f4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80014f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80014fa:	f001 fd0b 	bl	8002f14 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ffd0 	bl	80014a4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001506:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800150a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800150c:	d164      	bne.n	80015d8 <HAL_ADC_Init+0xf0>
 800150e:	2800      	cmp	r0, #0
 8001510:	d162      	bne.n	80015d8 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001512:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001514:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001518:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	f023 0302 	bic.w	r3, r3, #2
 800151e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001522:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001524:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001526:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001528:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800152a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800152e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001532:	d038      	beq.n	80015a6 <HAL_ADC_Init+0xbe>
 8001534:	2901      	cmp	r1, #1
 8001536:	bf14      	ite	ne
 8001538:	4606      	movne	r6, r0
 800153a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800153e:	6965      	ldr	r5, [r4, #20]
 8001540:	2d01      	cmp	r5, #1
 8001542:	d107      	bne.n	8001554 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001544:	2b00      	cmp	r3, #0
 8001546:	d130      	bne.n	80015aa <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001548:	69a3      	ldr	r3, [r4, #24]
 800154a:	3b01      	subs	r3, #1
 800154c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001550:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001554:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001556:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800155a:	685d      	ldr	r5, [r3, #4]
 800155c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001560:	ea45 0506 	orr.w	r5, r5, r6
 8001564:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001566:	689e      	ldr	r6, [r3, #8]
 8001568:	4d1d      	ldr	r5, [pc, #116]	; (80015e0 <HAL_ADC_Init+0xf8>)
 800156a:	ea05 0506 	and.w	r5, r5, r6
 800156e:	ea45 0502 	orr.w	r5, r5, r2
 8001572:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001574:	d001      	beq.n	800157a <HAL_ADC_Init+0x92>
 8001576:	2901      	cmp	r1, #1
 8001578:	d120      	bne.n	80015bc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800157a:	6921      	ldr	r1, [r4, #16]
 800157c:	3901      	subs	r1, #1
 800157e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001580:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001582:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8001586:	4329      	orrs	r1, r5
 8001588:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_ADC_Init+0xfc>)
 800158e:	400b      	ands	r3, r1
 8001590:	429a      	cmp	r2, r3
 8001592:	d115      	bne.n	80015c0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8001594:	2300      	movs	r3, #0
 8001596:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001598:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800159a:	f023 0303 	bic.w	r3, r3, #3
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80015a4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015a6:	460e      	mov	r6, r1
 80015a8:	e7c9      	b.n	800153e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015ac:	f043 0320 	orr.w	r3, r3, #32
 80015b0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80015ba:	e7cb      	b.n	8001554 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80015bc:	2100      	movs	r1, #0
 80015be:	e7df      	b.n	8001580 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80015c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015c2:	f023 0312 	bic.w	r3, r3, #18
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80015d4:	2001      	movs	r0, #1
}
 80015d6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80015de:	e7f9      	b.n	80015d4 <HAL_ADC_Init+0xec>
 80015e0:	ffe1f7fd 	.word	0xffe1f7fd
 80015e4:	ff1f0efe 	.word	0xff1f0efe

080015e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001606:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001608:	60d3      	str	r3, [r2, #12]
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001612:	b530      	push	{r4, r5, lr}
 8001614:	68dc      	ldr	r4, [r3, #12]
 8001616:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	2b04      	cmp	r3, #4
 8001622:	bf28      	it	cs
 8001624:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162c:	bf98      	it	ls
 800162e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	fa05 f303 	lsl.w	r3, r5, r3
 8001634:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001638:	bf88      	it	hi
 800163a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4019      	ands	r1, r3
 800163e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001640:	fa05 f404 	lsl.w	r4, r5, r4
 8001644:	3c01      	subs	r4, #1
 8001646:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001648:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164a:	ea42 0201 	orr.w	r2, r2, r1
 800164e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	bfaf      	iteee	ge
 8001654:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	4b06      	ldrlt	r3, [pc, #24]	; (8001674 <HAL_NVIC_SetPriority+0x64>)
 800165a:	f000 000f 	andlt.w	r0, r0, #15
 800165e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	bfa5      	ittet	ge
 8001662:	b2d2      	uxtbge	r2, r2
 8001664:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001668:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800166e:	bd30      	pop	{r4, r5, pc}
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	e000ed14 	.word	0xe000ed14

08001678 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001678:	2301      	movs	r3, #1
 800167a:	0942      	lsrs	r2, r0, #5
 800167c:	f000 001f 	and.w	r0, r0, #31
 8001680:	fa03 f000 	lsl.w	r0, r3, r0
 8001684:	4b01      	ldr	r3, [pc, #4]	; (800168c <HAL_NVIC_EnableIRQ+0x14>)
 8001686:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800168a:	4770      	bx	lr
 800168c:	e000e100 	.word	0xe000e100

08001690 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	3801      	subs	r0, #1
 8001692:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001696:	d20a      	bcs.n	80016ae <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016bc:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016be:	b330      	cbz	r0, 800170e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016c0:	2214      	movs	r2, #20
 80016c2:	6801      	ldr	r1, [r0, #0]
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016c6:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016c8:	440b      	add	r3, r1
 80016ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 80016d4:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80016d6:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 80016d8:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016da:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 80016de:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e0:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016e2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e6:	4323      	orrs	r3, r4
 80016e8:	6904      	ldr	r4, [r0, #16]
 80016ea:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ec:	6944      	ldr	r4, [r0, #20]
 80016ee:	4323      	orrs	r3, r4
 80016f0:	6984      	ldr	r4, [r0, #24]
 80016f2:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f4:	69c4      	ldr	r4, [r0, #28]
 80016f6:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80016f8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016fa:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016fc:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fe:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001700:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001704:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001706:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800170a:	4618      	mov	r0, r3
 800170c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800170e:	2001      	movs	r0, #1
}
 8001710:	bd10      	pop	{r4, pc}
 8001712:	bf00      	nop
 8001714:	bffdfff8 	.word	0xbffdfff8
 8001718:	40020000 	.word	0x40020000

0800171c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800171e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001722:	2c01      	cmp	r4, #1
 8001724:	d035      	beq.n	8001792 <HAL_DMA_Start_IT+0x76>
 8001726:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001728:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800172c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001730:	42a5      	cmp	r5, r4
 8001732:	f04f 0600 	mov.w	r6, #0
 8001736:	f04f 0402 	mov.w	r4, #2
 800173a:	d128      	bne.n	800178e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800173c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001740:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001742:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001744:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001746:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001748:	f026 0601 	bic.w	r6, r6, #1
 800174c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800174e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001750:	40bd      	lsls	r5, r7
 8001752:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001754:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001756:	6843      	ldr	r3, [r0, #4]
 8001758:	6805      	ldr	r5, [r0, #0]
 800175a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800175c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800175e:	bf0b      	itete	eq
 8001760:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001762:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001764:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001766:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001768:	b14b      	cbz	r3, 800177e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001770:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001772:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001774:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	602b      	str	r3, [r5, #0]
 800177c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	f043 030a 	orr.w	r3, r3, #10
 800178c:	e7f0      	b.n	8001770 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 800178e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001792:	2002      	movs	r0, #2
}
 8001794:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001798 <HAL_DMA_IRQHandler>:
{
 8001798:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800179a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800179c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800179e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017a0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80017a2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017a4:	4095      	lsls	r5, r2
 80017a6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80017a8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80017aa:	d032      	beq.n	8001812 <HAL_DMA_IRQHandler+0x7a>
 80017ac:	074d      	lsls	r5, r1, #29
 80017ae:	d530      	bpl.n	8001812 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017b4:	bf5e      	ittt	pl
 80017b6:	681a      	ldrpl	r2, [r3, #0]
 80017b8:	f022 0204 	bicpl.w	r2, r2, #4
 80017bc:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017be:	4a3e      	ldr	r2, [pc, #248]	; (80018b8 <HAL_DMA_IRQHandler+0x120>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d019      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x60>
 80017c4:	3214      	adds	r2, #20
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d018      	beq.n	80017fc <HAL_DMA_IRQHandler+0x64>
 80017ca:	3214      	adds	r2, #20
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d017      	beq.n	8001800 <HAL_DMA_IRQHandler+0x68>
 80017d0:	3214      	adds	r2, #20
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d017      	beq.n	8001806 <HAL_DMA_IRQHandler+0x6e>
 80017d6:	3214      	adds	r2, #20
 80017d8:	4293      	cmp	r3, r2
 80017da:	d017      	beq.n	800180c <HAL_DMA_IRQHandler+0x74>
 80017dc:	3214      	adds	r2, #20
 80017de:	4293      	cmp	r3, r2
 80017e0:	bf0c      	ite	eq
 80017e2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80017e6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80017ea:	4a34      	ldr	r2, [pc, #208]	; (80018bc <HAL_DMA_IRQHandler+0x124>)
 80017ec:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80017ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d05e      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x11a>
}
 80017f4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80017f6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017f8:	2304      	movs	r3, #4
 80017fa:	e7f6      	b.n	80017ea <HAL_DMA_IRQHandler+0x52>
 80017fc:	2340      	movs	r3, #64	; 0x40
 80017fe:	e7f4      	b.n	80017ea <HAL_DMA_IRQHandler+0x52>
 8001800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001804:	e7f1      	b.n	80017ea <HAL_DMA_IRQHandler+0x52>
 8001806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800180a:	e7ee      	b.n	80017ea <HAL_DMA_IRQHandler+0x52>
 800180c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001810:	e7eb      	b.n	80017ea <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001812:	2502      	movs	r5, #2
 8001814:	4095      	lsls	r5, r2
 8001816:	4225      	tst	r5, r4
 8001818:	d035      	beq.n	8001886 <HAL_DMA_IRQHandler+0xee>
 800181a:	078d      	lsls	r5, r1, #30
 800181c:	d533      	bpl.n	8001886 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	0694      	lsls	r4, r2, #26
 8001822:	d406      	bmi.n	8001832 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f022 020a 	bic.w	r2, r2, #10
 800182a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800182c:	2201      	movs	r2, #1
 800182e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001832:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <HAL_DMA_IRQHandler+0x120>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d019      	beq.n	800186c <HAL_DMA_IRQHandler+0xd4>
 8001838:	3214      	adds	r2, #20
 800183a:	4293      	cmp	r3, r2
 800183c:	d018      	beq.n	8001870 <HAL_DMA_IRQHandler+0xd8>
 800183e:	3214      	adds	r2, #20
 8001840:	4293      	cmp	r3, r2
 8001842:	d017      	beq.n	8001874 <HAL_DMA_IRQHandler+0xdc>
 8001844:	3214      	adds	r2, #20
 8001846:	4293      	cmp	r3, r2
 8001848:	d017      	beq.n	800187a <HAL_DMA_IRQHandler+0xe2>
 800184a:	3214      	adds	r2, #20
 800184c:	4293      	cmp	r3, r2
 800184e:	d017      	beq.n	8001880 <HAL_DMA_IRQHandler+0xe8>
 8001850:	3214      	adds	r2, #20
 8001852:	4293      	cmp	r3, r2
 8001854:	bf0c      	ite	eq
 8001856:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800185a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_DMA_IRQHandler+0x124>)
 8001860:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001862:	2300      	movs	r3, #0
 8001864:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001868:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800186a:	e7c1      	b.n	80017f0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800186c:	2302      	movs	r3, #2
 800186e:	e7f6      	b.n	800185e <HAL_DMA_IRQHandler+0xc6>
 8001870:	2320      	movs	r3, #32
 8001872:	e7f4      	b.n	800185e <HAL_DMA_IRQHandler+0xc6>
 8001874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001878:	e7f1      	b.n	800185e <HAL_DMA_IRQHandler+0xc6>
 800187a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187e:	e7ee      	b.n	800185e <HAL_DMA_IRQHandler+0xc6>
 8001880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001884:	e7eb      	b.n	800185e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001886:	2508      	movs	r5, #8
 8001888:	4095      	lsls	r5, r2
 800188a:	4225      	tst	r5, r4
 800188c:	d011      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x11a>
 800188e:	0709      	lsls	r1, r1, #28
 8001890:	d50f      	bpl.n	80018b2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001892:	6819      	ldr	r1, [r3, #0]
 8001894:	f021 010e 	bic.w	r1, r1, #14
 8001898:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800189a:	2301      	movs	r3, #1
 800189c:	fa03 f202 	lsl.w	r2, r3, r2
 80018a0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018a2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80018a4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80018a8:	2300      	movs	r3, #0
 80018aa:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80018ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80018b0:	e79e      	b.n	80017f0 <HAL_DMA_IRQHandler+0x58>
}
 80018b2:	bc70      	pop	{r4, r5, r6}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40020008 	.word	0x40020008
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80018c4:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80018c6:	4616      	mov	r6, r2
 80018c8:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ca:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001a70 <HAL_GPIO_Init+0x1b0>
 80018ce:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001a74 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80018d2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80018d8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018dc:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80018e0:	45a0      	cmp	r8, r4
 80018e2:	d17f      	bne.n	80019e4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80018e4:	684d      	ldr	r5, [r1, #4]
 80018e6:	2d12      	cmp	r5, #18
 80018e8:	f000 80af 	beq.w	8001a4a <HAL_GPIO_Init+0x18a>
 80018ec:	f200 8088 	bhi.w	8001a00 <HAL_GPIO_Init+0x140>
 80018f0:	2d02      	cmp	r5, #2
 80018f2:	f000 80a7 	beq.w	8001a44 <HAL_GPIO_Init+0x184>
 80018f6:	d87c      	bhi.n	80019f2 <HAL_GPIO_Init+0x132>
 80018f8:	2d00      	cmp	r5, #0
 80018fa:	f000 808e 	beq.w	8001a1a <HAL_GPIO_Init+0x15a>
 80018fe:	2d01      	cmp	r5, #1
 8001900:	f000 809e 	beq.w	8001a40 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001904:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001908:	2cff      	cmp	r4, #255	; 0xff
 800190a:	bf93      	iteet	ls
 800190c:	4682      	movls	sl, r0
 800190e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001912:	3d08      	subhi	r5, #8
 8001914:	f8d0 b000 	ldrls.w	fp, [r0]
 8001918:	bf92      	itee	ls
 800191a:	00b5      	lslls	r5, r6, #2
 800191c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001920:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001922:	fa09 f805 	lsl.w	r8, r9, r5
 8001926:	ea2b 0808 	bic.w	r8, fp, r8
 800192a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800192e:	bf88      	it	hi
 8001930:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001934:	ea48 0505 	orr.w	r5, r8, r5
 8001938:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001940:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001944:	d04e      	beq.n	80019e4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001946:	4d47      	ldr	r5, [pc, #284]	; (8001a64 <HAL_GPIO_Init+0x1a4>)
 8001948:	4f46      	ldr	r7, [pc, #280]	; (8001a64 <HAL_GPIO_Init+0x1a4>)
 800194a:	69ad      	ldr	r5, [r5, #24]
 800194c:	f026 0803 	bic.w	r8, r6, #3
 8001950:	f045 0501 	orr.w	r5, r5, #1
 8001954:	61bd      	str	r5, [r7, #24]
 8001956:	69bd      	ldr	r5, [r7, #24]
 8001958:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800195c:	f005 0501 	and.w	r5, r5, #1
 8001960:	9501      	str	r5, [sp, #4]
 8001962:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001966:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800196a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800196c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001970:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001974:	fa09 f90b 	lsl.w	r9, r9, fp
 8001978:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197c:	4d3a      	ldr	r5, [pc, #232]	; (8001a68 <HAL_GPIO_Init+0x1a8>)
 800197e:	42a8      	cmp	r0, r5
 8001980:	d068      	beq.n	8001a54 <HAL_GPIO_Init+0x194>
 8001982:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001986:	42a8      	cmp	r0, r5
 8001988:	d066      	beq.n	8001a58 <HAL_GPIO_Init+0x198>
 800198a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800198e:	42a8      	cmp	r0, r5
 8001990:	d064      	beq.n	8001a5c <HAL_GPIO_Init+0x19c>
 8001992:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001996:	42a8      	cmp	r0, r5
 8001998:	bf0c      	ite	eq
 800199a:	2503      	moveq	r5, #3
 800199c:	2504      	movne	r5, #4
 800199e:	fa05 f50b 	lsl.w	r5, r5, fp
 80019a2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80019a6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019aa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ac:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80019b0:	bf14      	ite	ne
 80019b2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b4:	43a5      	biceq	r5, r4
 80019b6:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ba:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80019be:	bf14      	ite	ne
 80019c0:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019c2:	43a5      	biceq	r5, r4
 80019c4:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80019cc:	bf14      	ite	ne
 80019ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d0:	43a5      	biceq	r5, r4
 80019d2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019d4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80019da:	bf14      	ite	ne
 80019dc:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019de:	ea25 0404 	biceq.w	r4, r5, r4
 80019e2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80019e4:	3601      	adds	r6, #1
 80019e6:	2e10      	cmp	r6, #16
 80019e8:	f47f af73 	bne.w	80018d2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80019ec:	b003      	add	sp, #12
 80019ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80019f2:	2d03      	cmp	r5, #3
 80019f4:	d022      	beq.n	8001a3c <HAL_GPIO_Init+0x17c>
 80019f6:	2d11      	cmp	r5, #17
 80019f8:	d184      	bne.n	8001904 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019fa:	68ca      	ldr	r2, [r1, #12]
 80019fc:	3204      	adds	r2, #4
          break;
 80019fe:	e781      	b.n	8001904 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001a00:	4f1a      	ldr	r7, [pc, #104]	; (8001a6c <HAL_GPIO_Init+0x1ac>)
 8001a02:	42bd      	cmp	r5, r7
 8001a04:	d009      	beq.n	8001a1a <HAL_GPIO_Init+0x15a>
 8001a06:	d812      	bhi.n	8001a2e <HAL_GPIO_Init+0x16e>
 8001a08:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001a78 <HAL_GPIO_Init+0x1b8>
 8001a0c:	454d      	cmp	r5, r9
 8001a0e:	d004      	beq.n	8001a1a <HAL_GPIO_Init+0x15a>
 8001a10:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001a14:	454d      	cmp	r5, r9
 8001a16:	f47f af75 	bne.w	8001904 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a1a:	688a      	ldr	r2, [r1, #8]
 8001a1c:	b1c2      	cbz	r2, 8001a50 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a1e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001a20:	bf0c      	ite	eq
 8001a22:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001a26:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	e76a      	b.n	8001904 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001a2e:	4575      	cmp	r5, lr
 8001a30:	d0f3      	beq.n	8001a1a <HAL_GPIO_Init+0x15a>
 8001a32:	4565      	cmp	r5, ip
 8001a34:	d0f1      	beq.n	8001a1a <HAL_GPIO_Init+0x15a>
 8001a36:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001a7c <HAL_GPIO_Init+0x1bc>
 8001a3a:	e7eb      	b.n	8001a14 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	e761      	b.n	8001904 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a40:	68ca      	ldr	r2, [r1, #12]
          break;
 8001a42:	e75f      	b.n	8001904 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a44:	68ca      	ldr	r2, [r1, #12]
 8001a46:	3208      	adds	r2, #8
          break;
 8001a48:	e75c      	b.n	8001904 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a4a:	68ca      	ldr	r2, [r1, #12]
 8001a4c:	320c      	adds	r2, #12
          break;
 8001a4e:	e759      	b.n	8001904 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a50:	2204      	movs	r2, #4
 8001a52:	e757      	b.n	8001904 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a54:	2500      	movs	r5, #0
 8001a56:	e7a2      	b.n	800199e <HAL_GPIO_Init+0xde>
 8001a58:	2501      	movs	r5, #1
 8001a5a:	e7a0      	b.n	800199e <HAL_GPIO_Init+0xde>
 8001a5c:	2502      	movs	r5, #2
 8001a5e:	e79e      	b.n	800199e <HAL_GPIO_Init+0xde>
 8001a60:	40010400 	.word	0x40010400
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	10210000 	.word	0x10210000
 8001a70:	10310000 	.word	0x10310000
 8001a74:	10320000 	.word	0x10320000
 8001a78:	10110000 	.word	0x10110000
 8001a7c:	10220000 	.word	0x10220000

08001a80 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a80:	6883      	ldr	r3, [r0, #8]
 8001a82:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001a84:	bf14      	ite	ne
 8001a86:	2001      	movne	r0, #1
 8001a88:	2000      	moveq	r0, #0
 8001a8a:	4770      	bx	lr

08001a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a8c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001a90:	6959      	ldr	r1, [r3, #20]
 8001a92:	4201      	tst	r1, r0
 8001a94:	d002      	beq.n	8001a9c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a96:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a98:	f001 f83a 	bl	8002b10 <HAL_GPIO_EXTI_Callback>
 8001a9c:	bd08      	pop	{r3, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa4:	6803      	ldr	r3, [r0, #0]
{
 8001aa6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	07db      	lsls	r3, r3, #31
{
 8001aac:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	d410      	bmi.n	8001ad2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab0:	682b      	ldr	r3, [r5, #0]
 8001ab2:	079f      	lsls	r7, r3, #30
 8001ab4:	d45e      	bmi.n	8001b74 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	0719      	lsls	r1, r3, #28
 8001aba:	f100 8095 	bmi.w	8001be8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001abe:	682b      	ldr	r3, [r5, #0]
 8001ac0:	075a      	lsls	r2, r3, #29
 8001ac2:	f100 80bf 	bmi.w	8001c44 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac6:	69ea      	ldr	r2, [r5, #28]
 8001ac8:	2a00      	cmp	r2, #0
 8001aca:	f040 812d 	bne.w	8001d28 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001ace:	2000      	movs	r0, #0
 8001ad0:	e014      	b.n	8001afc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ad2:	4c90      	ldr	r4, [pc, #576]	; (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	6863      	ldr	r3, [r4, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d007      	beq.n	8001aee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ade:	6863      	ldr	r3, [r4, #4]
 8001ae0:	f003 030c 	and.w	r3, r3, #12
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d10c      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5e>
 8001ae8:	6863      	ldr	r3, [r4, #4]
 8001aea:	03de      	lsls	r6, r3, #15
 8001aec:	d509      	bpl.n	8001b02 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	039c      	lsls	r4, r3, #14
 8001af2:	d5dd      	bpl.n	8001ab0 <HAL_RCC_OscConfig+0xc>
 8001af4:	686b      	ldr	r3, [r5, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1da      	bne.n	8001ab0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001afa:	2001      	movs	r0, #1
}
 8001afc:	b002      	add	sp, #8
 8001afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	686b      	ldr	r3, [r5, #4]
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d110      	bne.n	8001b2c <HAL_RCC_OscConfig+0x88>
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b10:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b12:	f7ff fac3 	bl	800109c <HAL_GetTick>
 8001b16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b18:	6823      	ldr	r3, [r4, #0]
 8001b1a:	0398      	lsls	r0, r3, #14
 8001b1c:	d4c8      	bmi.n	8001ab0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fabd 	bl	800109c <HAL_GetTick>
 8001b22:	1b80      	subs	r0, r0, r6
 8001b24:	2864      	cmp	r0, #100	; 0x64
 8001b26:	d9f7      	bls.n	8001b18 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001b28:	2003      	movs	r0, #3
 8001b2a:	e7e7      	b.n	8001afc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2c:	b99b      	cbnz	r3, 8001b56 <HAL_RCC_OscConfig+0xb2>
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b34:	6023      	str	r3, [r4, #0]
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b3e:	f7ff faad 	bl	800109c <HAL_GetTick>
 8001b42:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	0399      	lsls	r1, r3, #14
 8001b48:	d5b2      	bpl.n	8001ab0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4a:	f7ff faa7 	bl	800109c <HAL_GetTick>
 8001b4e:	1b80      	subs	r0, r0, r6
 8001b50:	2864      	cmp	r0, #100	; 0x64
 8001b52:	d9f7      	bls.n	8001b44 <HAL_RCC_OscConfig+0xa0>
 8001b54:	e7e8      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	d103      	bne.n	8001b66 <HAL_RCC_OscConfig+0xc2>
 8001b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b62:	6023      	str	r3, [r4, #0]
 8001b64:	e7d1      	b.n	8001b0a <HAL_RCC_OscConfig+0x66>
 8001b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b6a:	6023      	str	r3, [r4, #0]
 8001b6c:	6823      	ldr	r3, [r4, #0]
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b72:	e7cd      	b.n	8001b10 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b74:	4c67      	ldr	r4, [pc, #412]	; (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001b76:	6863      	ldr	r3, [r4, #4]
 8001b78:	f013 0f0c 	tst.w	r3, #12
 8001b7c:	d007      	beq.n	8001b8e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b7e:	6863      	ldr	r3, [r4, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d110      	bne.n	8001baa <HAL_RCC_OscConfig+0x106>
 8001b88:	6863      	ldr	r3, [r4, #4]
 8001b8a:	03da      	lsls	r2, r3, #15
 8001b8c:	d40d      	bmi.n	8001baa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	079b      	lsls	r3, r3, #30
 8001b92:	d502      	bpl.n	8001b9a <HAL_RCC_OscConfig+0xf6>
 8001b94:	692b      	ldr	r3, [r5, #16]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d1af      	bne.n	8001afa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9a:	6823      	ldr	r3, [r4, #0]
 8001b9c:	696a      	ldr	r2, [r5, #20]
 8001b9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ba2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001ba6:	6023      	str	r3, [r4, #0]
 8001ba8:	e785      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001baa:	692a      	ldr	r2, [r5, #16]
 8001bac:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <HAL_RCC_OscConfig+0x274>)
 8001bae:	b16a      	cbz	r2, 8001bcc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fa72 	bl	800109c <HAL_GetTick>
 8001bb8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	6823      	ldr	r3, [r4, #0]
 8001bbc:	079f      	lsls	r7, r3, #30
 8001bbe:	d4ec      	bmi.n	8001b9a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fa6c 	bl	800109c <HAL_GetTick>
 8001bc4:	1b80      	subs	r0, r0, r6
 8001bc6:	2802      	cmp	r0, #2
 8001bc8:	d9f7      	bls.n	8001bba <HAL_RCC_OscConfig+0x116>
 8001bca:	e7ad      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001bcc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bce:	f7ff fa65 	bl	800109c <HAL_GetTick>
 8001bd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd4:	6823      	ldr	r3, [r4, #0]
 8001bd6:	0798      	lsls	r0, r3, #30
 8001bd8:	f57f af6d 	bpl.w	8001ab6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bdc:	f7ff fa5e 	bl	800109c <HAL_GetTick>
 8001be0:	1b80      	subs	r0, r0, r6
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d9f6      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x130>
 8001be6:	e79f      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001be8:	69aa      	ldr	r2, [r5, #24]
 8001bea:	4c4a      	ldr	r4, [pc, #296]	; (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_OscConfig+0x278>)
 8001bee:	b1da      	cbz	r2, 8001c28 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fa52 	bl	800109c <HAL_GetTick>
 8001bf8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bfc:	079b      	lsls	r3, r3, #30
 8001bfe:	d50d      	bpl.n	8001c1c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c00:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c04:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_RCC_OscConfig+0x27c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c0c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001c0e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001c10:	9b01      	ldr	r3, [sp, #4]
 8001c12:	1e5a      	subs	r2, r3, #1
 8001c14:	9201      	str	r2, [sp, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f9      	bne.n	8001c0e <HAL_RCC_OscConfig+0x16a>
 8001c1a:	e750      	b.n	8001abe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7ff fa3e 	bl	800109c <HAL_GetTick>
 8001c20:	1b80      	subs	r0, r0, r6
 8001c22:	2802      	cmp	r0, #2
 8001c24:	d9e9      	bls.n	8001bfa <HAL_RCC_OscConfig+0x156>
 8001c26:	e77f      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001c28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fa37 	bl	800109c <HAL_GetTick>
 8001c2e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c32:	079f      	lsls	r7, r3, #30
 8001c34:	f57f af43 	bpl.w	8001abe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff fa30 	bl	800109c <HAL_GetTick>
 8001c3c:	1b80      	subs	r0, r0, r6
 8001c3e:	2802      	cmp	r0, #2
 8001c40:	d9f6      	bls.n	8001c30 <HAL_RCC_OscConfig+0x18c>
 8001c42:	e771      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c44:	4c33      	ldr	r4, [pc, #204]	; (8001d14 <HAL_RCC_OscConfig+0x270>)
 8001c46:	69e3      	ldr	r3, [r4, #28]
 8001c48:	00d8      	lsls	r0, r3, #3
 8001c4a:	d424      	bmi.n	8001c96 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001c4c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	69e3      	ldr	r3, [r4, #28]
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	61e3      	str	r3, [r4, #28]
 8001c56:	69e3      	ldr	r3, [r4, #28]
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	4e30      	ldr	r6, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0x280>)
 8001c62:	6833      	ldr	r3, [r6, #0]
 8001c64:	05d9      	lsls	r1, r3, #23
 8001c66:	d518      	bpl.n	8001c9a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c68:	68eb      	ldr	r3, [r5, #12]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d126      	bne.n	8001cbc <HAL_RCC_OscConfig+0x218>
 8001c6e:	6a23      	ldr	r3, [r4, #32]
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001c76:	f7ff fa11 	bl	800109c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c7e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	6a23      	ldr	r3, [r4, #32]
 8001c82:	079b      	lsls	r3, r3, #30
 8001c84:	d53f      	bpl.n	8001d06 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001c86:	2f00      	cmp	r7, #0
 8001c88:	f43f af1d 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8c:	69e3      	ldr	r3, [r4, #28]
 8001c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c92:	61e3      	str	r3, [r4, #28]
 8001c94:	e717      	b.n	8001ac6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001c96:	2700      	movs	r7, #0
 8001c98:	e7e2      	b.n	8001c60 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9a:	6833      	ldr	r3, [r6, #0]
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001ca2:	f7ff f9fb 	bl	800109c <HAL_GetTick>
 8001ca6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	6833      	ldr	r3, [r6, #0]
 8001caa:	05da      	lsls	r2, r3, #23
 8001cac:	d4dc      	bmi.n	8001c68 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cae:	f7ff f9f5 	bl	800109c <HAL_GetTick>
 8001cb2:	eba0 0008 	sub.w	r0, r0, r8
 8001cb6:	2864      	cmp	r0, #100	; 0x64
 8001cb8:	d9f6      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x204>
 8001cba:	e735      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	b9ab      	cbnz	r3, 8001cea <HAL_RCC_OscConfig+0x246>
 8001cbe:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6223      	str	r3, [r4, #32]
 8001cca:	6a23      	ldr	r3, [r4, #32]
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f9e3 	bl	800109c <HAL_GetTick>
 8001cd6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd8:	6a23      	ldr	r3, [r4, #32]
 8001cda:	0798      	lsls	r0, r3, #30
 8001cdc:	d5d3      	bpl.n	8001c86 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7ff f9dd 	bl	800109c <HAL_GetTick>
 8001ce2:	1b80      	subs	r0, r0, r6
 8001ce4:	4540      	cmp	r0, r8
 8001ce6:	d9f7      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x234>
 8001ce8:	e71e      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	6a23      	ldr	r3, [r4, #32]
 8001cee:	d103      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x254>
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6223      	str	r3, [r4, #32]
 8001cf6:	e7ba      	b.n	8001c6e <HAL_RCC_OscConfig+0x1ca>
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	6223      	str	r3, [r4, #32]
 8001cfe:	6a23      	ldr	r3, [r4, #32]
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	e7b6      	b.n	8001c74 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7ff f9c9 	bl	800109c <HAL_GetTick>
 8001d0a:	eba0 0008 	sub.w	r0, r0, r8
 8001d0e:	42b0      	cmp	r0, r6
 8001d10:	d9b6      	bls.n	8001c80 <HAL_RCC_OscConfig+0x1dc>
 8001d12:	e709      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
 8001d14:	40021000 	.word	0x40021000
 8001d18:	42420000 	.word	0x42420000
 8001d1c:	42420480 	.word	0x42420480
 8001d20:	2000000c 	.word	0x2000000c
 8001d24:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d28:	4c22      	ldr	r4, [pc, #136]	; (8001db4 <HAL_RCC_OscConfig+0x310>)
 8001d2a:	6863      	ldr	r3, [r4, #4]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	f43f aee2 	beq.w	8001afa <HAL_RCC_OscConfig+0x56>
 8001d36:	2300      	movs	r3, #0
 8001d38:	4e1f      	ldr	r6, [pc, #124]	; (8001db8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3e:	d12b      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001d40:	f7ff f9ac 	bl	800109c <HAL_GetTick>
 8001d44:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	0199      	lsls	r1, r3, #6
 8001d4a:	d41f      	bmi.n	8001d8c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d4c:	6a2b      	ldr	r3, [r5, #32]
 8001d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d54:	6862      	ldr	r2, [r4, #4]
 8001d56:	68a9      	ldr	r1, [r5, #8]
 8001d58:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001d62:	6862      	ldr	r2, [r4, #4]
 8001d64:	430b      	orrs	r3, r1
 8001d66:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001d6e:	2301      	movs	r3, #1
 8001d70:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d72:	f7ff f993 	bl	800109c <HAL_GetTick>
 8001d76:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	019a      	lsls	r2, r3, #6
 8001d7c:	f53f aea7 	bmi.w	8001ace <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff f98c 	bl	800109c <HAL_GetTick>
 8001d84:	1b40      	subs	r0, r0, r5
 8001d86:	2802      	cmp	r0, #2
 8001d88:	d9f6      	bls.n	8001d78 <HAL_RCC_OscConfig+0x2d4>
 8001d8a:	e6cd      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f986 	bl	800109c <HAL_GetTick>
 8001d90:	1bc0      	subs	r0, r0, r7
 8001d92:	2802      	cmp	r0, #2
 8001d94:	d9d7      	bls.n	8001d46 <HAL_RCC_OscConfig+0x2a2>
 8001d96:	e6c7      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001d98:	f7ff f980 	bl	800109c <HAL_GetTick>
 8001d9c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	f57f ae94 	bpl.w	8001ace <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7ff f979 	bl	800109c <HAL_GetTick>
 8001daa:	1b40      	subs	r0, r0, r5
 8001dac:	2802      	cmp	r0, #2
 8001dae:	d9f6      	bls.n	8001d9e <HAL_RCC_OscConfig+0x2fa>
 8001db0:	e6ba      	b.n	8001b28 <HAL_RCC_OscConfig+0x84>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	42420060 	.word	0x42420060

08001dbc <HAL_RCC_GetSysClockFreq>:
{
 8001dbc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001dc0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001dc2:	ac02      	add	r4, sp, #8
 8001dc4:	f103 0510 	add.w	r5, r3, #16
 8001dc8:	4622      	mov	r2, r4
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	6859      	ldr	r1, [r3, #4]
 8001dce:	3308      	adds	r3, #8
 8001dd0:	c203      	stmia	r2!, {r0, r1}
 8001dd2:	42ab      	cmp	r3, r5
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	d1f7      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f88d 3004 	strb.w	r3, [sp, #4]
 8001dde:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001de0:	4911      	ldr	r1, [pc, #68]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001de2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001de6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001de8:	f003 020c 	and.w	r2, r3, #12
 8001dec:	2a08      	cmp	r2, #8
 8001dee:	d117      	bne.n	8001e20 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001df0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001df4:	a806      	add	r0, sp, #24
 8001df6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001df8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dfa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dfe:	d50c      	bpl.n	8001e1a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e00:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e02:	480a      	ldr	r0, [pc, #40]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e04:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e08:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e0a:	aa06      	add	r2, sp, #24
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e12:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001e16:	b007      	add	sp, #28
 8001e18:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x74>)
 8001e1c:	4350      	muls	r0, r2
 8001e1e:	e7fa      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001e22:	e7f8      	b.n	8001e16 <HAL_RCC_GetSysClockFreq+0x5a>
 8001e24:	080036e8 	.word	0x080036e8
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	007a1200 	.word	0x007a1200
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e34:	4a54      	ldr	r2, [pc, #336]	; (8001f88 <HAL_RCC_ClockConfig+0x154>)
{
 8001e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e3a:	6813      	ldr	r3, [r2, #0]
{
 8001e3c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	428b      	cmp	r3, r1
{
 8001e44:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e46:	d32a      	bcc.n	8001e9e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e48:	6829      	ldr	r1, [r5, #0]
 8001e4a:	078c      	lsls	r4, r1, #30
 8001e4c:	d434      	bmi.n	8001eb8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	07ca      	lsls	r2, r1, #31
 8001e50:	d447      	bmi.n	8001ee2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e52:	4a4d      	ldr	r2, [pc, #308]	; (8001f88 <HAL_RCC_ClockConfig+0x154>)
 8001e54:	6813      	ldr	r3, [r2, #0]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	429e      	cmp	r6, r3
 8001e5c:	f0c0 8082 	bcc.w	8001f64 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	682a      	ldr	r2, [r5, #0]
 8001e62:	4c4a      	ldr	r4, [pc, #296]	; (8001f8c <HAL_RCC_ClockConfig+0x158>)
 8001e64:	f012 0f04 	tst.w	r2, #4
 8001e68:	f040 8087 	bne.w	8001f7a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6c:	0713      	lsls	r3, r2, #28
 8001e6e:	d506      	bpl.n	8001e7e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	692a      	ldr	r2, [r5, #16]
 8001e74:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e78:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e7c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e7e:	f7ff ff9d 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001e82:	6863      	ldr	r3, [r4, #4]
 8001e84:	4a42      	ldr	r2, [pc, #264]	; (8001f90 <HAL_RCC_ClockConfig+0x15c>)
 8001e86:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	40d8      	lsrs	r0, r3
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_RCC_ClockConfig+0x160>)
 8001e90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff f8c0 	bl	8001018 <HAL_InitTick>
  return HAL_OK;
 8001e98:	2000      	movs	r0, #0
}
 8001e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	6813      	ldr	r3, [r2, #0]
 8001ea0:	f023 0307 	bic.w	r3, r3, #7
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ea8:	6813      	ldr	r3, [r2, #0]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	4299      	cmp	r1, r3
 8001eb0:	d0ca      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ebe:	bf1e      	ittt	ne
 8001ec0:	685a      	ldrne	r2, [r3, #4]
 8001ec2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001ec6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eca:	bf42      	ittt	mi
 8001ecc:	685a      	ldrmi	r2, [r3, #4]
 8001ece:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001ed2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	68a8      	ldr	r0, [r5, #8]
 8001ed8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001edc:	4302      	orrs	r2, r0
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	e7b5      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	686a      	ldr	r2, [r5, #4]
 8001ee4:	4c29      	ldr	r4, [pc, #164]	; (8001f8c <HAL_RCC_ClockConfig+0x158>)
 8001ee6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eea:	d11c      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	d0df      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef8:	f023 0303 	bic.w	r3, r3, #3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001f00:	f7ff f8cc 	bl	800109c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f04:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001f06:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d114      	bne.n	8001f36 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d09d      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f16:	f7ff f8c1 	bl	800109c <HAL_GetTick>
 8001f1a:	1bc0      	subs	r0, r0, r7
 8001f1c:	4540      	cmp	r0, r8
 8001f1e:	d9f5      	bls.n	8001f0c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001f20:	2003      	movs	r0, #3
 8001f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	2a02      	cmp	r2, #2
 8001f28:	d102      	bne.n	8001f30 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f2a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f2e:	e7df      	b.n	8001ef0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f30:	f013 0f02 	tst.w	r3, #2
 8001f34:	e7dc      	b.n	8001ef0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d10f      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f3a:	6863      	ldr	r3, [r4, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d086      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f44:	f7ff f8aa 	bl	800109c <HAL_GetTick>
 8001f48:	1bc0      	subs	r0, r0, r7
 8001f4a:	4540      	cmp	r0, r8
 8001f4c:	d9f5      	bls.n	8001f3a <HAL_RCC_ClockConfig+0x106>
 8001f4e:	e7e7      	b.n	8001f20 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff f8a4 	bl	800109c <HAL_GetTick>
 8001f54:	1bc0      	subs	r0, r0, r7
 8001f56:	4540      	cmp	r0, r8
 8001f58:	d8e2      	bhi.n	8001f20 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	6863      	ldr	r3, [r4, #4]
 8001f5c:	f013 0f0c 	tst.w	r3, #12
 8001f60:	d1f6      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x11c>
 8001f62:	e776      	b.n	8001e52 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f64:	6813      	ldr	r3, [r2, #0]
 8001f66:	f023 0307 	bic.w	r3, r3, #7
 8001f6a:	4333      	orrs	r3, r6
 8001f6c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f6e:	6813      	ldr	r3, [r2, #0]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	429e      	cmp	r6, r3
 8001f76:	d19c      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0x7e>
 8001f78:	e772      	b.n	8001e60 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7a:	6863      	ldr	r3, [r4, #4]
 8001f7c:	68e9      	ldr	r1, [r5, #12]
 8001f7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f82:	430b      	orrs	r3, r1
 8001f84:	6063      	str	r3, [r4, #4]
 8001f86:	e771      	b.n	8001e6c <HAL_RCC_ClockConfig+0x38>
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	080036f8 	.word	0x080036f8
 8001f94:	2000000c 	.word	0x2000000c

08001f98 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f98:	6803      	ldr	r3, [r0, #0]
{
 8001f9a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f9e:	07d9      	lsls	r1, r3, #31
{
 8001fa0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fa2:	d520      	bpl.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa4:	4c35      	ldr	r4, [pc, #212]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001fa6:	69e3      	ldr	r3, [r4, #28]
 8001fa8:	00da      	lsls	r2, r3, #3
 8001faa:	d432      	bmi.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001fac:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	69e3      	ldr	r3, [r4, #28]
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	61e3      	str	r3, [r4, #28]
 8001fb6:	69e3      	ldr	r3, [r4, #28]
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	4e2f      	ldr	r6, [pc, #188]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001fc2:	6833      	ldr	r3, [r6, #0]
 8001fc4:	05db      	lsls	r3, r3, #23
 8001fc6:	d526      	bpl.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fc8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fca:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fce:	d136      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001fd0:	6a23      	ldr	r3, [r4, #32]
 8001fd2:	686a      	ldr	r2, [r5, #4]
 8001fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fdc:	b11f      	cbz	r7, 8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fde:	69e3      	ldr	r3, [r4, #28]
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fe6:	6828      	ldr	r0, [r5, #0]
 8001fe8:	0783      	lsls	r3, r0, #30
 8001fea:	d506      	bpl.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001fee:	68a9      	ldr	r1, [r5, #8]
 8001ff0:	6853      	ldr	r3, [r2, #4]
 8001ff2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ffa:	f010 0010 	ands.w	r0, r0, #16
 8001ffe:	d01b      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002000:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002002:	68e9      	ldr	r1, [r5, #12]
 8002004:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002006:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002008:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800200c:	430b      	orrs	r3, r1
 800200e:	6053      	str	r3, [r2, #4]
 8002010:	e012      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2700      	movs	r7, #0
 8002014:	e7d4      	b.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002016:	6833      	ldr	r3, [r6, #0]
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800201e:	f7ff f83d 	bl	800109c <HAL_GetTick>
 8002022:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	6833      	ldr	r3, [r6, #0]
 8002026:	05d8      	lsls	r0, r3, #23
 8002028:	d4ce      	bmi.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202a:	f7ff f837 	bl	800109c <HAL_GetTick>
 800202e:	eba0 0008 	sub.w	r0, r0, r8
 8002032:	2864      	cmp	r0, #100	; 0x64
 8002034:	d9f6      	bls.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002036:	2003      	movs	r0, #3
}
 8002038:	b002      	add	sp, #8
 800203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800203e:	686a      	ldr	r2, [r5, #4]
 8002040:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002044:	4293      	cmp	r3, r2
 8002046:	d0c3      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002048:	2001      	movs	r0, #1
 800204a:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800204c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800204e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002050:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002052:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002056:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002058:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800205a:	07d9      	lsls	r1, r3, #31
 800205c:	d5b8      	bpl.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800205e:	f7ff f81d 	bl	800109c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002066:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002068:	6a23      	ldr	r3, [r4, #32]
 800206a:	079a      	lsls	r2, r3, #30
 800206c:	d4b0      	bmi.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff f815 	bl	800109c <HAL_GetTick>
 8002072:	1b80      	subs	r0, r0, r6
 8002074:	4540      	cmp	r0, r8
 8002076:	d9f7      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002078:	e7dd      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40007000 	.word	0x40007000
 8002084:	42420440 	.word	0x42420440

08002088 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002088:	6a03      	ldr	r3, [r0, #32]
{
 800208a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002092:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002094:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002096:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002098:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800209a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800209e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020a0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80020a2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80020a6:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020a8:	4d0a      	ldr	r5, [pc, #40]	; (80020d4 <TIM_OC1_SetConfig+0x4c>)
 80020aa:	42a8      	cmp	r0, r5
 80020ac:	d10b      	bne.n	80020c6 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80020b0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80020b4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020b6:	698e      	ldr	r6, [r1, #24]
 80020b8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020ba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80020be:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80020c0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80020c4:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020c8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020ca:	684a      	ldr	r2, [r1, #4]
 80020cc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ce:	6203      	str	r3, [r0, #32]
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	bf00      	nop
 80020d4:	40012c00 	.word	0x40012c00

080020d8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020d8:	6a03      	ldr	r3, [r0, #32]
{
 80020da:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020e6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80020ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80020f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020fa:	4d0b      	ldr	r5, [pc, #44]	; (8002128 <TIM_OC3_SetConfig+0x50>)
 80020fc:	42a8      	cmp	r0, r5
 80020fe:	d10d      	bne.n	800211c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002100:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002106:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800210a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800210c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800210e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002112:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002118:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800211c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800211e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002120:	684a      	ldr	r2, [r1, #4]
 8002122:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002124:	6203      	str	r3, [r0, #32]
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	40012c00 	.word	0x40012c00

0800212c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800212c:	6a03      	ldr	r3, [r0, #32]
{
 800212e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002134:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002136:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002138:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800213a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800213c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800213e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002142:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002146:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800214c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002150:	4d06      	ldr	r5, [pc, #24]	; (800216c <TIM_OC4_SetConfig+0x40>)
 8002152:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002154:	bf02      	ittt	eq
 8002156:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002158:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 800215c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002160:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002162:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002164:	684a      	ldr	r2, [r1, #4]
 8002166:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002168:	6203      	str	r3, [r0, #32]
 800216a:	bd30      	pop	{r4, r5, pc}
 800216c:	40012c00 	.word	0x40012c00

08002170 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8002170:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8002172:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002174:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8002178:	6813      	ldr	r3, [r2, #0]
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8002180:	2301      	movs	r3, #1
 8002182:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002186:	2000      	movs	r0, #0
 8002188:	4770      	bx	lr

0800218a <HAL_TIM_PWM_MspInit>:
 800218a:	4770      	bx	lr

0800218c <HAL_TIM_IC_MspInit>:
 800218c:	4770      	bx	lr

0800218e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800218e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002192:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002194:	2b01      	cmp	r3, #1
 8002196:	f04f 0302 	mov.w	r3, #2
 800219a:	d01c      	beq.n	80021d6 <HAL_TIM_ConfigClockSource+0x48>
 800219c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800219e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80021a2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80021a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80021a8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021aa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021ae:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80021b2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80021b4:	680a      	ldr	r2, [r1, #0]
 80021b6:	2a40      	cmp	r2, #64	; 0x40
 80021b8:	d079      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x120>
 80021ba:	d819      	bhi.n	80021f0 <HAL_TIM_ConfigClockSource+0x62>
 80021bc:	2a10      	cmp	r2, #16
 80021be:	f000 8093 	beq.w	80022e8 <HAL_TIM_ConfigClockSource+0x15a>
 80021c2:	d80a      	bhi.n	80021da <HAL_TIM_ConfigClockSource+0x4c>
 80021c4:	2a00      	cmp	r2, #0
 80021c6:	f000 8089 	beq.w	80022dc <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021d0:	2300      	movs	r3, #0
 80021d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80021d6:	4618      	mov	r0, r3
}
 80021d8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80021da:	2a20      	cmp	r2, #32
 80021dc:	f000 808a 	beq.w	80022f4 <HAL_TIM_ConfigClockSource+0x166>
 80021e0:	2a30      	cmp	r2, #48	; 0x30
 80021e2:	d1f2      	bne.n	80021ca <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80021e4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021ea:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80021ee:	e036      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80021f0:	2a70      	cmp	r2, #112	; 0x70
 80021f2:	d036      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0xd4>
 80021f4:	d81b      	bhi.n	800222e <HAL_TIM_ConfigClockSource+0xa0>
 80021f6:	2a50      	cmp	r2, #80	; 0x50
 80021f8:	d042      	beq.n	8002280 <HAL_TIM_ConfigClockSource+0xf2>
 80021fa:	2a60      	cmp	r2, #96	; 0x60
 80021fc:	d1e5      	bne.n	80021ca <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021fe:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002200:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002202:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002206:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002208:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800220a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800220c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800220e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002212:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002216:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800221a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800221e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002220:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002222:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002224:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002228:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800222c:	e017      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800222e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002232:	d011      	beq.n	8002258 <HAL_TIM_ConfigClockSource+0xca>
 8002234:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002238:	d1c7      	bne.n	80021ca <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800223a:	688a      	ldr	r2, [r1, #8]
 800223c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800223e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002240:	68c9      	ldr	r1, [r1, #12]
 8002242:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002244:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002248:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800224c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002256:	e002      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	e7b3      	b.n	80021ca <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002262:	688a      	ldr	r2, [r1, #8]
 8002264:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002266:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002268:	68c9      	ldr	r1, [r1, #12]
 800226a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800226c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002270:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002274:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002276:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002278:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800227a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800227e:	e7ee      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002280:	684c      	ldr	r4, [r1, #4]
 8002282:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002284:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002286:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002288:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228c:	f025 0501 	bic.w	r5, r5, #1
 8002290:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002292:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002294:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002296:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800229a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800229e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022a0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80022a2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022a8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80022ac:	e7d7      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ae:	684c      	ldr	r4, [r1, #4]
 80022b0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80022b2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ba:	f025 0501 	bic.w	r5, r5, #1
 80022be:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022c0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80022c2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80022cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022ce:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80022d0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022d6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80022da:	e7c0      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022dc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022e2:	f042 0207 	orr.w	r2, r2, #7
 80022e6:	e7ba      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022e8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022ee:	f042 0217 	orr.w	r2, r2, #23
 80022f2:	e7b4      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022f4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022fa:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80022fe:	e7ae      	b.n	800225e <HAL_TIM_ConfigClockSource+0xd0>

08002300 <HAL_TIM_PeriodElapsedCallback>:
 8002300:	4770      	bx	lr

08002302 <HAL_TIM_OC_DelayElapsedCallback>:
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002304:	4770      	bx	lr

08002306 <HAL_TIM_TriggerCallback>:
 8002306:	4770      	bx	lr

08002308 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002308:	6803      	ldr	r3, [r0, #0]
{
 800230a:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800230c:	691a      	ldr	r2, [r3, #16]
{
 800230e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002310:	0791      	lsls	r1, r2, #30
 8002312:	d50e      	bpl.n	8002332 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	0792      	lsls	r2, r2, #30
 8002318:	d50b      	bpl.n	8002332 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800231a:	f06f 0202 	mvn.w	r2, #2
 800231e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002320:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002322:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002324:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002326:	079b      	lsls	r3, r3, #30
 8002328:	d077      	beq.n	800241a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800232a:	f000 fac9 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	2300      	movs	r3, #0
 8002330:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	0750      	lsls	r0, r2, #29
 8002338:	d510      	bpl.n	800235c <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800233a:	68da      	ldr	r2, [r3, #12]
 800233c:	0751      	lsls	r1, r2, #29
 800233e:	d50d      	bpl.n	800235c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002340:	f06f 0204 	mvn.w	r2, #4
 8002344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002346:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002348:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800234a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800234c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002350:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002352:	d068      	beq.n	8002426 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002354:	f000 fab4 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002358:	2300      	movs	r3, #0
 800235a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	691a      	ldr	r2, [r3, #16]
 8002360:	0712      	lsls	r2, r2, #28
 8002362:	d50f      	bpl.n	8002384 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	0710      	lsls	r0, r2, #28
 8002368:	d50c      	bpl.n	8002384 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800236a:	f06f 0208 	mvn.w	r2, #8
 800236e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002370:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002372:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002374:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002376:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002378:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800237a:	d05a      	beq.n	8002432 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800237c:	f000 faa0 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002380:	2300      	movs	r3, #0
 8002382:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	06d2      	lsls	r2, r2, #27
 800238a:	d510      	bpl.n	80023ae <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	06d0      	lsls	r0, r2, #27
 8002390:	d50d      	bpl.n	80023ae <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002392:	f06f 0210 	mvn.w	r2, #16
 8002396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002398:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800239a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800239e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a4:	d04b      	beq.n	800243e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80023a6:	f000 fa8b 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023aa:	2300      	movs	r3, #0
 80023ac:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	07d1      	lsls	r1, r2, #31
 80023b4:	d508      	bpl.n	80023c8 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	07d2      	lsls	r2, r2, #31
 80023ba:	d505      	bpl.n	80023c8 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023bc:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c4:	f7ff ff9c 	bl	8002300 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	0610      	lsls	r0, r2, #24
 80023ce:	d508      	bpl.n	80023e2 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	0611      	lsls	r1, r2, #24
 80023d4:	d505      	bpl.n	80023e2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80023da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023de:	f000 fa6c 	bl	80028ba <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	0652      	lsls	r2, r2, #25
 80023e8:	d508      	bpl.n	80023fc <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	0650      	lsls	r0, r2, #25
 80023ee:	d505      	bpl.n	80023fc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80023f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023f8:	f7ff ff85 	bl	8002306 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	0691      	lsls	r1, r2, #26
 8002402:	d522      	bpl.n	800244a <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	0692      	lsls	r2, r2, #26
 8002408:	d51f      	bpl.n	800244a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800240a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800240e:	4620      	mov	r0, r4
}
 8002410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002414:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002416:	f000 ba4f 	b.w	80028b8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	f7ff ff72 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff ff70 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
 8002424:	e783      	b.n	800232e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002426:	f7ff ff6c 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff ff6a 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
 8002430:	e792      	b.n	8002358 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	f7ff ff66 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff ff64 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
 800243c:	e7a0      	b.n	8002380 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	f7ff ff60 	bl	8002302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff ff5e 	bl	8002304 <HAL_TIM_PWM_PulseFinishedCallback>
 8002448:	e7af      	b.n	80023aa <HAL_TIM_IRQHandler+0xa2>
 800244a:	bd10      	pop	{r4, pc}

0800244c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800244c:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800244e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002450:	4290      	cmp	r0, r2
 8002452:	d00a      	beq.n	800246a <TIM_Base_SetConfig+0x1e>
 8002454:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002458:	d007      	beq.n	800246a <TIM_Base_SetConfig+0x1e>
 800245a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800245e:	4290      	cmp	r0, r2
 8002460:	d003      	beq.n	800246a <TIM_Base_SetConfig+0x1e>
 8002462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002466:	4290      	cmp	r0, r2
 8002468:	d115      	bne.n	8002496 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800246a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800246c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002470:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002472:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <TIM_Base_SetConfig+0x6c>)
 8002474:	4290      	cmp	r0, r2
 8002476:	d00a      	beq.n	800248e <TIM_Base_SetConfig+0x42>
 8002478:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800247c:	d007      	beq.n	800248e <TIM_Base_SetConfig+0x42>
 800247e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002482:	4290      	cmp	r0, r2
 8002484:	d003      	beq.n	800248e <TIM_Base_SetConfig+0x42>
 8002486:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800248a:	4290      	cmp	r0, r2
 800248c:	d103      	bne.n	8002496 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800248e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002494:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002496:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800249c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800249e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024a0:	688b      	ldr	r3, [r1, #8]
 80024a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80024a4:	680b      	ldr	r3, [r1, #0]
 80024a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a8:	4b03      	ldr	r3, [pc, #12]	; (80024b8 <TIM_Base_SetConfig+0x6c>)
 80024aa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80024ac:	bf04      	itt	eq
 80024ae:	690b      	ldreq	r3, [r1, #16]
 80024b0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80024b2:	2301      	movs	r3, #1
 80024b4:	6143      	str	r3, [r0, #20]
 80024b6:	4770      	bx	lr
 80024b8:	40012c00 	.word	0x40012c00

080024bc <HAL_TIM_Base_Init>:
{
 80024bc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80024be:	4604      	mov	r4, r0
 80024c0:	b1a0      	cbz	r0, 80024ec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80024c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024ca:	b91b      	cbnz	r3, 80024d4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80024cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80024d0:	f000 fd74 	bl	8002fbc <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80024d4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80024d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024dc:	1d21      	adds	r1, r4, #4
 80024de:	f7ff ffb5 	bl	800244c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80024e2:	2301      	movs	r3, #1
  return HAL_OK;
 80024e4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80024e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80024ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024ec:	2001      	movs	r0, #1
}
 80024ee:	bd10      	pop	{r4, pc}

080024f0 <HAL_TIM_PWM_Init>:
{
 80024f0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80024f2:	4604      	mov	r4, r0
 80024f4:	b1a0      	cbz	r0, 8002520 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80024f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024fe:	b91b      	cbnz	r3, 8002508 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002500:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002504:	f7ff fe41 	bl	800218a <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002508:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800250a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800250c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002510:	1d21      	adds	r1, r4, #4
 8002512:	f7ff ff9b 	bl	800244c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002516:	2301      	movs	r3, #1
  return HAL_OK;
 8002518:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800251a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800251e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002520:	2001      	movs	r0, #1
}
 8002522:	bd10      	pop	{r4, pc}

08002524 <HAL_TIM_IC_Init>:
{
 8002524:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002526:	4604      	mov	r4, r0
 8002528:	b1a0      	cbz	r0, 8002554 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800252a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800252e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002532:	b91b      	cbnz	r3, 800253c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002534:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8002538:	f7ff fe28 	bl	800218c <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800253c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002540:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002544:	1d21      	adds	r1, r4, #4
 8002546:	f7ff ff81 	bl	800244c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800254a:	2301      	movs	r3, #1
  return HAL_OK;
 800254c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800254e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002552:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002554:	2001      	movs	r0, #1
}
 8002556:	bd10      	pop	{r4, pc}

08002558 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002558:	6a03      	ldr	r3, [r0, #32]
{
 800255a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800255c:	f023 0310 	bic.w	r3, r3, #16
 8002560:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002562:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002564:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002566:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002568:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800256a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800256e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002572:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002574:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002578:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800257c:	4d0b      	ldr	r5, [pc, #44]	; (80025ac <TIM_OC2_SetConfig+0x54>)
 800257e:	42a8      	cmp	r0, r5
 8002580:	d10d      	bne.n	800259e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002582:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002588:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800258c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800258e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002590:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002594:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800259a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800259e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80025a0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80025a2:	684a      	ldr	r2, [r1, #4]
 80025a4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80025a6:	6203      	str	r3, [r0, #32]
 80025a8:	bd70      	pop	{r4, r5, r6, pc}
 80025aa:	bf00      	nop
 80025ac:	40012c00 	.word	0x40012c00

080025b0 <HAL_TIM_PWM_ConfigChannel>:
{
 80025b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80025b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80025b6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	f04f 0002 	mov.w	r0, #2
 80025be:	d025      	beq.n	800260c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80025c0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80025c2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80025c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80025ca:	2a0c      	cmp	r2, #12
 80025cc:	d818      	bhi.n	8002600 <HAL_TIM_PWM_ConfigChannel+0x50>
 80025ce:	e8df f002 	tbb	[pc, r2]
 80025d2:	1707      	.short	0x1707
 80025d4:	171e1717 	.word	0x171e1717
 80025d8:	172f1717 	.word	0x172f1717
 80025dc:	1717      	.short	0x1717
 80025de:	40          	.byte	0x40
 80025df:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025e0:	6820      	ldr	r0, [r4, #0]
 80025e2:	f7ff fd51 	bl	8002088 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025e8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	f042 0208 	orr.w	r2, r2, #8
 80025f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	f022 0204 	bic.w	r2, r2, #4
 80025f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80025fe:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002600:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002602:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002604:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002608:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800260c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800260e:	6820      	ldr	r0, [r4, #0]
 8002610:	f7ff ffa2 	bl	8002558 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002614:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002616:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800262e:	e7e6      	b.n	80025fe <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002630:	6820      	ldr	r0, [r4, #0]
 8002632:	f7ff fd51 	bl	80020d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002636:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002638:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800263a:	69da      	ldr	r2, [r3, #28]
 800263c:	f042 0208 	orr.w	r2, r2, #8
 8002640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	f022 0204 	bic.w	r2, r2, #4
 8002648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800264e:	61da      	str	r2, [r3, #28]
    break;
 8002650:	e7d6      	b.n	8002600 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002652:	6820      	ldr	r0, [r4, #0]
 8002654:	f7ff fd6a 	bl	800212c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002658:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800265a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002662:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800266a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800266c:	69da      	ldr	r2, [r3, #28]
 800266e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002672:	e7ec      	b.n	800264e <HAL_TIM_PWM_ConfigChannel+0x9e>

08002674 <TIM_TI1_SetConfig>:
{
 8002674:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002676:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002678:	4e12      	ldr	r6, [pc, #72]	; (80026c4 <TIM_TI1_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800267a:	f024 0401 	bic.w	r4, r4, #1
 800267e:	6204      	str	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002680:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8002682:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002684:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002686:	d00a      	beq.n	800269e <TIM_TI1_SetConfig+0x2a>
 8002688:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800268c:	d007      	beq.n	800269e <TIM_TI1_SetConfig+0x2a>
 800268e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002692:	42b0      	cmp	r0, r6
 8002694:	d003      	beq.n	800269e <TIM_TI1_SetConfig+0x2a>
 8002696:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800269a:	42b0      	cmp	r0, r6
 800269c:	d10f      	bne.n	80026be <TIM_TI1_SetConfig+0x4a>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800269e:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80026a2:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026a4:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026aa:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026ac:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026b0:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80026b4:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80026b6:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80026b8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80026ba:	6201      	str	r1, [r0, #32]
}
 80026bc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80026be:	f044 0201 	orr.w	r2, r4, #1
 80026c2:	e7ef      	b.n	80026a4 <TIM_TI1_SetConfig+0x30>
 80026c4:	40012c00 	.word	0x40012c00

080026c8 <HAL_TIM_IC_ConfigChannel>:
{
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80026ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80026ce:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80026d0:	2b01      	cmp	r3, #1
{
 80026d2:	460d      	mov	r5, r1
 80026d4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80026d8:	d019      	beq.n	800270e <HAL_TIM_IC_ConfigChannel+0x46>
 80026da:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80026e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80026e4:	b9a2      	cbnz	r2, 8002710 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 80026e6:	68cb      	ldr	r3, [r1, #12]
 80026e8:	6820      	ldr	r0, [r4, #0]
 80026ea:	c906      	ldmia	r1, {r1, r2}
 80026ec:	f7ff ffc2 	bl	8002674 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026f0:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026f2:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	f022 020c 	bic.w	r2, r2, #12
 80026fa:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	430a      	orrs	r2, r1
 8002700:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002702:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002704:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002706:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800270a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800270e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002710:	2a04      	cmp	r2, #4
 8002712:	688e      	ldr	r6, [r1, #8]
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	c982      	ldmia	r1, {r1, r7}
 8002718:	68e8      	ldr	r0, [r5, #12]
 800271a:	d11f      	bne.n	800275c <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800271c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800271e:	0300      	lsls	r0, r0, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002720:	f022 0210 	bic.w	r2, r2, #16
 8002724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002726:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002728:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800272a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800272e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002732:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002734:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002738:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800273a:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800273c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002740:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002744:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002748:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800274a:	699a      	ldr	r2, [r3, #24]
 800274c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002750:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002758:	619e      	str	r6, [r3, #24]
 800275a:	e7d2      	b.n	8002702 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 800275c:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800275e:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8002760:	d11c      	bne.n	800279c <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002766:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002768:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800276a:	0100      	lsls	r0, r0, #4
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800276c:	f022 0203 	bic.w	r2, r2, #3
  tmpccer = TIMx->CCER;
 8002770:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= TIM_ICSelection;
 8002772:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002774:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002776:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 800277a:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800277c:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 800277e:	f401 7100 	and.w	r1, r1, #512	; 0x200
  tmpccer &= ~(TIM_CCER_CC3P);
 8002782:	f425 7000 	bic.w	r0, r5, #512	; 0x200
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P));
 8002786:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8002788:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800278a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	f022 020c 	bic.w	r2, r2, #12
 8002792:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002798:	61de      	str	r6, [r3, #28]
 800279a:	e7b2      	b.n	8002702 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800279c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027a2:	69da      	ldr	r2, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027a4:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80027a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccer = TIMx->CCER;
 80027aa:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80027ac:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80027b0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027b4:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80027b6:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80027b8:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80027ba:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
  tmpccer &= ~TIM_CCER_CC4P;
 80027be:	f425 5200 	bic.w	r2, r5, #8192	; 0x2000
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80027c2:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 80027c4:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80027c6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80027c8:	69da      	ldr	r2, [r3, #28]
 80027ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027ce:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80027d6:	e7df      	b.n	8002798 <HAL_TIM_IC_ConfigChannel+0xd0>

080027d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027d8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80027da:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027dc:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80027de:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80027e0:	ea23 0304 	bic.w	r3, r3, r4
 80027e4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80027e6:	6a03      	ldr	r3, [r0, #32]
 80027e8:	408a      	lsls	r2, r1
 80027ea:	431a      	orrs	r2, r3
 80027ec:	6202      	str	r2, [r0, #32]
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <HAL_TIM_PWM_Start>:
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027f4:	2201      	movs	r2, #1
 80027f6:	6800      	ldr	r0, [r0, #0]
 80027f8:	f7ff ffee 	bl	80027d8 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027fc:	6823      	ldr	r3, [r4, #0]
 80027fe:	4a06      	ldr	r2, [pc, #24]	; (8002818 <HAL_TIM_PWM_Start+0x28>)
}
 8002800:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002802:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002804:	bf02      	ittt	eq
 8002806:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002808:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800280c:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
}
 8002816:	bd10      	pop	{r4, pc}
 8002818:	40012c00 	.word	0x40012c00

0800281c <HAL_TIM_IC_Start_IT>:
{
 800281c:	b510      	push	{r4, lr}
 800281e:	4604      	mov	r4, r0
  switch (Channel)
 8002820:	290c      	cmp	r1, #12
 8002822:	d80d      	bhi.n	8002840 <HAL_TIM_IC_Start_IT+0x24>
 8002824:	e8df f001 	tbb	[pc, r1]
 8002828:	0c0c0c07 	.word	0x0c0c0c07
 800282c:	0c0c0c17 	.word	0x0c0c0c17
 8002830:	0c0c0c1c 	.word	0x0c0c0c1c
 8002834:	21          	.byte	0x21
 8002835:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002836:	6802      	ldr	r2, [r0, #0]
 8002838:	68d3      	ldr	r3, [r2, #12]
 800283a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800283e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002840:	6820      	ldr	r0, [r4, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	f7ff ffc8 	bl	80027d8 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8002848:	6822      	ldr	r2, [r4, #0]
}
 800284a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6013      	str	r3, [r2, #0]
}
 8002854:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002856:	6802      	ldr	r2, [r0, #0]
 8002858:	68d3      	ldr	r3, [r2, #12]
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	e7ee      	b.n	800283e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002860:	6802      	ldr	r2, [r0, #0]
 8002862:	68d3      	ldr	r3, [r2, #12]
 8002864:	f043 0308 	orr.w	r3, r3, #8
 8002868:	e7e9      	b.n	800283e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800286a:	6802      	ldr	r2, [r0, #0]
 800286c:	68d3      	ldr	r3, [r2, #12]
 800286e:	f043 0310 	orr.w	r3, r3, #16
 8002872:	e7e4      	b.n	800283e <HAL_TIM_IC_Start_IT+0x22>

08002874 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002874:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002878:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800287a:	2b01      	cmp	r3, #1
 800287c:	f04f 0302 	mov.w	r3, #2
 8002880:	d018      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002882:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002886:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002888:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800288a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800288c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800288e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002892:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	4322      	orrs	r2, r4
 8002898:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028a0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ae:	2300      	movs	r3, #0
 80028b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80028b4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80028b6:	bd10      	pop	{r4, pc}

080028b8 <HAL_TIMEx_CommutationCallback>:
 80028b8:	4770      	bx	lr

080028ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ba:	4770      	bx	lr
 80028bc:	0000      	movs	r0, r0
	...

080028c0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*******************Speed*********************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80028c0:	b510      	push	{r4, lr}
	if (htim->Instance == TIM2) {
 80028c2:	6804      	ldr	r4, [r0, #0]
 80028c4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80028c8:	f040 80e8 	bne.w	8002a9c <HAL_TIM_IC_CaptureCallback+0x1dc>
		//HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1) // check if channel 1 is interrupted
 80028cc:	7f03      	ldrb	r3, [r0, #28]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d136      	bne.n	8002940 <HAL_TIM_IC_CaptureCallback+0x80>
				{
			if (flag[0] == 0) {
 80028d2:	4a79      	ldr	r2, [pc, #484]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80028d4:	7811      	ldrb	r1, [r2, #0]
 80028d6:	b911      	cbnz	r1, 80028de <HAL_TIM_IC_CaptureCallback+0x1e>
				__HAL_TIM_SET_COUNTER(htim, 0);
 80028d8:	6261      	str	r1, [r4, #36]	; 0x24
				flag[0] = 1;
 80028da:	7013      	strb	r3, [r2, #0]
 80028dc:	bd10      	pop	{r4, pc}
			} else {
				inpCapVal[0] = __HAL_TIM_GET_COUNTER(htim);
 80028de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80028e0:	f7fe f9cc 	bl	8000c7c <__aeabi_ui2f>
 80028e4:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80028e6:	6018      	str	r0, [r3, #0]
				freq_of_nail[0] = (131147.541) / inpCapVal[0];
 80028e8:	f7fd fd96 	bl	8000418 <__aeabi_f2d>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	a16b      	add	r1, pc, #428	; (adr r1, 8002aa0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80028f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028f6:	f7fd ff0d 	bl	8000714 <__aeabi_ddiv>
 80028fa:	f7fe f8b9 	bl	8000a70 <__aeabi_d2f>
 80028fe:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <HAL_TIM_IC_CaptureCallback+0x200>)
				__HAL_TIM_SET_COUNTER(htim, 0);
				freq_of_wheel[0]=freq_of_nail[0]/NUM_OF_NAILS;
 8002900:	4970      	ldr	r1, [pc, #448]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x204>)
				freq_of_nail[0] = (131147.541) / inpCapVal[0];
 8002902:	6018      	str	r0, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8002904:	2300      	movs	r3, #0
 8002906:	6263      	str	r3, [r4, #36]	; 0x24
				freq_of_wheel[0]=freq_of_nail[0]/NUM_OF_NAILS;
 8002908:	f7fe fac4 	bl	8000e94 <__aeabi_fdiv>
 800290c:	4b6e      	ldr	r3, [pc, #440]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x208>)
 800290e:	6018      	str	r0, [r3, #0]
				speed[0] = 2 * PI * freq_of_wheel[0] * RADIUS * 18;
 8002910:	f7fd fd82 	bl	8000418 <__aeabi_f2d>
 8002914:	a364      	add	r3, pc, #400	; (adr r3, 8002aa8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fd fdd1 	bl	80004c0 <__aeabi_dmul>
 800291e:	a364      	add	r3, pc, #400	; (adr r3, 8002ab0 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f7fd fdcc 	bl	80004c0 <__aeabi_dmul>
 8002928:	4b68      	ldr	r3, [pc, #416]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x20c>)
 800292a:	2200      	movs	r2, #0
 800292c:	f7fd fdc8 	bl	80004c0 <__aeabi_dmul>
 8002930:	f7fe f89e 	bl	8000a70 <__aeabi_d2f>
				speed[0] = speed[0] / 5;
 8002934:	4963      	ldr	r1, [pc, #396]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002936:	f7fe faad 	bl	8000e94 <__aeabi_fdiv>
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x210>)
 800293c:	6018      	str	r0, [r3, #0]
 800293e:	bd10      	pop	{r4, pc}
			}
		}

		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2) // check if channel 2 is interrupted
 8002940:	2b02      	cmp	r3, #2
 8002942:	d137      	bne.n	80029b4 <HAL_TIM_IC_CaptureCallback+0xf4>
				{
			if (flag[1] == 0) {
 8002944:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002946:	785a      	ldrb	r2, [r3, #1]
 8002948:	b91a      	cbnz	r2, 8002952 <HAL_TIM_IC_CaptureCallback+0x92>
				__HAL_TIM_SET_COUNTER(htim, 0);
 800294a:	6262      	str	r2, [r4, #36]	; 0x24
				flag[1] = 1;
 800294c:	2201      	movs	r2, #1
 800294e:	705a      	strb	r2, [r3, #1]
 8002950:	bd10      	pop	{r4, pc}
			} else {
				inpCapVal[1] = __HAL_TIM_GET_COUNTER(htim);
 8002952:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002954:	f7fe f992 	bl	8000c7c <__aeabi_ui2f>
 8002958:	4b58      	ldr	r3, [pc, #352]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800295a:	6058      	str	r0, [r3, #4]
				freq_of_nail[1] = (131147.541) / inpCapVal[1];
 800295c:	f7fd fd5c 	bl	8000418 <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	a14e      	add	r1, pc, #312	; (adr r1, 8002aa0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8002966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800296a:	f7fd fed3 	bl	8000714 <__aeabi_ddiv>
 800296e:	f7fe f87f 	bl	8000a70 <__aeabi_d2f>
 8002972:	4b53      	ldr	r3, [pc, #332]	; (8002ac0 <HAL_TIM_IC_CaptureCallback+0x200>)
				__HAL_TIM_SET_COUNTER(htim, 0);
				freq_of_wheel[1]=freq_of_nail[1]/NUM_OF_NAILS;
 8002974:	4953      	ldr	r1, [pc, #332]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x204>)
				freq_of_nail[1] = (131147.541) / inpCapVal[1];
 8002976:	6058      	str	r0, [r3, #4]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8002978:	2300      	movs	r3, #0
 800297a:	6263      	str	r3, [r4, #36]	; 0x24
				freq_of_wheel[1]=freq_of_nail[1]/NUM_OF_NAILS;
 800297c:	f7fe fa8a 	bl	8000e94 <__aeabi_fdiv>
 8002980:	4b51      	ldr	r3, [pc, #324]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002982:	6058      	str	r0, [r3, #4]
				speed[1] = 2 * PI * freq_of_wheel[1] * RADIUS * 18;
 8002984:	f7fd fd48 	bl	8000418 <__aeabi_f2d>
 8002988:	a347      	add	r3, pc, #284	; (adr r3, 8002aa8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f7fd fd97 	bl	80004c0 <__aeabi_dmul>
 8002992:	a347      	add	r3, pc, #284	; (adr r3, 8002ab0 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fd92 	bl	80004c0 <__aeabi_dmul>
 800299c:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x20c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	f7fd fd8e 	bl	80004c0 <__aeabi_dmul>
 80029a4:	f7fe f864 	bl	8000a70 <__aeabi_d2f>
				speed[1] = speed[1] / 5;
 80029a8:	4946      	ldr	r1, [pc, #280]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x204>)
 80029aa:	f7fe fa73 	bl	8000e94 <__aeabi_fdiv>
 80029ae:	4b48      	ldr	r3, [pc, #288]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x210>)
 80029b0:	6058      	str	r0, [r3, #4]
 80029b2:	bd10      	pop	{r4, pc}
			}
		}
		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_3) // check if channel 3 is interrupted
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d16f      	bne.n	8002a98 <HAL_TIM_IC_CaptureCallback+0x1d8>
				{
			if (flag[2] == 0) {
 80029b8:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80029ba:	789a      	ldrb	r2, [r3, #2]
 80029bc:	b91a      	cbnz	r2, 80029c6 <HAL_TIM_IC_CaptureCallback+0x106>
				__HAL_TIM_SET_COUNTER(htim, 0);
 80029be:	6262      	str	r2, [r4, #36]	; 0x24
				flag[2] = 1;
 80029c0:	2201      	movs	r2, #1
 80029c2:	709a      	strb	r2, [r3, #2]
 80029c4:	bd10      	pop	{r4, pc}
			} else {
				inpCapVal[2] = __HAL_TIM_GET_COUNTER(htim);
 80029c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80029c8:	f7fe f958 	bl	8000c7c <__aeabi_ui2f>
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80029ce:	6098      	str	r0, [r3, #8]
				freq_of_nail[2] = (131147.541) / inpCapVal[2];
 80029d0:	f7fd fd22 	bl	8000418 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	a131      	add	r1, pc, #196	; (adr r1, 8002aa0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80029da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029de:	f7fd fe99 	bl	8000714 <__aeabi_ddiv>
 80029e2:	f7fe f845 	bl	8000a70 <__aeabi_d2f>
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_TIM_IC_CaptureCallback+0x200>)
				__HAL_TIM_SET_COUNTER(htim, 0);
				freq_of_wheel[2]=freq_of_nail[2]/NUM_OF_NAILS;
 80029e8:	4936      	ldr	r1, [pc, #216]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x204>)
				freq_of_nail[2] = (131147.541) / inpCapVal[2];
 80029ea:	6098      	str	r0, [r3, #8]
				__HAL_TIM_SET_COUNTER(htim, 0);
 80029ec:	2300      	movs	r3, #0
 80029ee:	6263      	str	r3, [r4, #36]	; 0x24
				freq_of_wheel[2]=freq_of_nail[2]/NUM_OF_NAILS;
 80029f0:	f7fe fa50 	bl	8000e94 <__aeabi_fdiv>
 80029f4:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x208>)
 80029f6:	6098      	str	r0, [r3, #8]
				speed[2] = 2 * PI * freq_of_wheel[2] * RADIUS * 18;
 80029f8:	f7fd fd0e 	bl	8000418 <__aeabi_f2d>
 80029fc:	a32a      	add	r3, pc, #168	; (adr r3, 8002aa8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fd5d 	bl	80004c0 <__aeabi_dmul>
 8002a06:	a32a      	add	r3, pc, #168	; (adr r3, 8002ab0 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fd58 	bl	80004c0 <__aeabi_dmul>
 8002a10:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	f7fd fd54 	bl	80004c0 <__aeabi_dmul>
 8002a18:	f7fe f82a 	bl	8000a70 <__aeabi_d2f>
				speed[2] = speed[2] / 5;
 8002a1c:	4929      	ldr	r1, [pc, #164]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002a1e:	f7fe fa39 	bl	8000e94 <__aeabi_fdiv>
 8002a22:	4b2b      	ldr	r3, [pc, #172]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002a24:	6098      	str	r0, [r3, #8]
 8002a26:	bd10      	pop	{r4, pc}
			}
		}
		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4) // check if channel 4 is interrupted
				{
			if (flag[3] == 0) {
 8002a28:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8002a2a:	78da      	ldrb	r2, [r3, #3]
 8002a2c:	b91a      	cbnz	r2, 8002a36 <HAL_TIM_IC_CaptureCallback+0x176>
				__HAL_TIM_SET_COUNTER(htim, 0);
 8002a2e:	6262      	str	r2, [r4, #36]	; 0x24
				flag[3] = 1;
 8002a30:	2201      	movs	r2, #1
 8002a32:	70da      	strb	r2, [r3, #3]
 8002a34:	bd10      	pop	{r4, pc}
			} else {
				inpCapVal[3] = __HAL_TIM_GET_COUNTER(htim);
 8002a36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a38:	f7fe f920 	bl	8000c7c <__aeabi_ui2f>
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	; (8002abc <HAL_TIM_IC_CaptureCallback+0x1fc>)
 8002a3e:	60d8      	str	r0, [r3, #12]
				freq_of_nail[3] = (131147.541) / inpCapVal[3];
 8002a40:	f7fd fcea 	bl	8000418 <__aeabi_f2d>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	a115      	add	r1, pc, #84	; (adr r1, 8002aa0 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8002a4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a4e:	f7fd fe61 	bl	8000714 <__aeabi_ddiv>
 8002a52:	f7fe f80d 	bl	8000a70 <__aeabi_d2f>
 8002a56:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_TIM_IC_CaptureCallback+0x200>)
				__HAL_TIM_SET_COUNTER(htim, 0);
				freq_of_wheel[3]=freq_of_nail[3]/NUM_OF_NAILS;
 8002a58:	491a      	ldr	r1, [pc, #104]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x204>)
				freq_of_nail[3] = (131147.541) / inpCapVal[3];
 8002a5a:	60d8      	str	r0, [r3, #12]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6263      	str	r3, [r4, #36]	; 0x24
				freq_of_wheel[3]=freq_of_nail[3]/NUM_OF_NAILS;
 8002a60:	f7fe fa18 	bl	8000e94 <__aeabi_fdiv>
 8002a64:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <HAL_TIM_IC_CaptureCallback+0x208>)
 8002a66:	60d8      	str	r0, [r3, #12]
				speed[3] = 2 * PI * freq_of_wheel[3] * RADIUS * 18;
 8002a68:	f7fd fcd6 	bl	8000418 <__aeabi_f2d>
 8002a6c:	a30e      	add	r3, pc, #56	; (adr r3, 8002aa8 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8002a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a72:	f7fd fd25 	bl	80004c0 <__aeabi_dmul>
 8002a76:	a30e      	add	r3, pc, #56	; (adr r3, 8002ab0 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fd20 	bl	80004c0 <__aeabi_dmul>
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_TIM_IC_CaptureCallback+0x20c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	f7fd fd1c 	bl	80004c0 <__aeabi_dmul>
 8002a88:	f7fd fff2 	bl	8000a70 <__aeabi_d2f>
				speed[3] = speed[3] / 5;
 8002a8c:	490d      	ldr	r1, [pc, #52]	; (8002ac4 <HAL_TIM_IC_CaptureCallback+0x204>)
 8002a8e:	f7fe fa01 	bl	8000e94 <__aeabi_fdiv>
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <HAL_TIM_IC_CaptureCallback+0x210>)
 8002a94:	60d8      	str	r0, [r3, #12]
			}
		}

	}
}
 8002a96:	bd10      	pop	{r4, pc}
		if (htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4) // check if channel 4 is interrupted
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d0c5      	beq.n	8002a28 <HAL_TIM_IC_CaptureCallback+0x168>
 8002a9c:	bd10      	pop	{r4, pc}
 8002a9e:	bf00      	nop
 8002aa0:	53f7ced9 	.word	0x53f7ced9
 8002aa4:	4100025c 	.word	0x4100025c
 8002aa8:	51eb851f 	.word	0x51eb851f
 8002aac:	40191eb8 	.word	0x40191eb8
 8002ab0:	33333333 	.word	0x33333333
 8002ab4:	3fc33333 	.word	0x3fc33333
 8002ab8:	200000c0 	.word	0x200000c0
 8002abc:	200000e4 	.word	0x200000e4
 8002ac0:	200000c4 	.word	0x200000c4
 8002ac4:	40a00000 	.word	0x40a00000
 8002ac8:	200000d4 	.word	0x200000d4
 8002acc:	40320000 	.word	0x40320000
 8002ad0:	200000fc 	.word	0x200000fc

08002ad4 <averageWheelSpeed>:
void averageWheelSpeed(void)
{
 8002ad4:	b510      	push	{r4, lr}
	wheelSpeed=speed[0]+speed[1]+speed[2]+speed[3];
 8002ad6:	4c0b      	ldr	r4, [pc, #44]	; (8002b04 <averageWheelSpeed+0x30>)
 8002ad8:	6861      	ldr	r1, [r4, #4]
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	f7fe f81e 	bl	8000b1c <__addsf3>
 8002ae0:	68a1      	ldr	r1, [r4, #8]
 8002ae2:	f7fe f81b 	bl	8000b1c <__addsf3>
 8002ae6:	68e1      	ldr	r1, [r4, #12]
 8002ae8:	f7fe f818 	bl	8000b1c <__addsf3>
	wheelSpeed=wheelSpeed/4;
 8002aec:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002af0:	f7fe f91c 	bl	8000d2c <__aeabi_fmul>
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <averageWheelSpeed+0x34>)
 8002af6:	6018      	str	r0, [r3, #0]
	finalWheelSpeed=wheelSpeed;
 8002af8:	f7fe fa68 	bl	8000fcc <__aeabi_f2iz>
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <averageWheelSpeed+0x38>)
 8002afe:	6018      	str	r0, [r3, #0]
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	bf00      	nop
 8002b04:	200000fc 	.word	0x200000fc
 8002b08:	2000010c 	.word	0x2000010c
 8002b0c:	200000bc 	.word	0x200000bc

08002b10 <HAL_GPIO_EXTI_Callback>:


/**************************Steering************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==GPIO_PIN_12)
 8002b10:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
{
 8002b14:	b508      	push	{r3, lr}
	if(GPIO_Pin==GPIO_PIN_12)
 8002b16:	d110      	bne.n	8002b3a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_11)==1)
 8002b18:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002b1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b20:	f500 4078 	add.w	r0, r0, #63488	; 0xf800
 8002b24:	f7fe ffac 	bl	8001a80 <HAL_GPIO_ReadPin>
 8002b28:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x38>)
 8002b2a:	2801      	cmp	r0, #1
			finalAngle++;
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	bf0c      	ite	eq
 8002b30:	3201      	addeq	r2, #1
		else
			finalAngle--;
 8002b32:	f102 32ff 	addne.w	r2, r2, #4294967295
	}
	if(GPIO_Pin==GPIO_PIN_10)
	{
		finalAngle=90;
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	bd08      	pop	{r3, pc}
	if(GPIO_Pin==GPIO_PIN_10)
 8002b3a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002b3e:	d1fb      	bne.n	8002b38 <HAL_GPIO_EXTI_Callback+0x28>
		finalAngle=90;
 8002b40:	225a      	movs	r2, #90	; 0x5a
 8002b42:	4b01      	ldr	r3, [pc, #4]	; (8002b48 <HAL_GPIO_EXTI_Callback+0x38>)
 8002b44:	e7f7      	b.n	8002b36 <HAL_GPIO_EXTI_Callback+0x26>
 8002b46:	bf00      	nop
 8002b48:	20000008 	.word	0x20000008

08002b4c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4c:	2228      	movs	r2, #40	; 0x28
{
 8002b4e:	b510      	push	{r4, lr}
 8002b50:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b52:	eb0d 0002 	add.w	r0, sp, r2
 8002b56:	2100      	movs	r1, #0
 8002b58:	f000 fb5c 	bl	8003214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b5c:	2214      	movs	r2, #20
 8002b5e:	2100      	movs	r1, #0
 8002b60:	eb0d 0002 	add.w	r0, sp, r2
 8002b64:	f000 fb56 	bl	8003214 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	a801      	add	r0, sp, #4
 8002b6e:	f000 fb51 	bl	8003214 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b76:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b78:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b7a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b7c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b7e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b82:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b84:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b86:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b88:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b8a:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b8c:	f7fe ff8a 	bl	8001aa4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b90:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b96:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b98:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b9e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ba0:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ba2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba4:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ba6:	f7ff f945 	bl	8001e34 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bae:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002bb0:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002bb2:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb4:	f7ff f9f0 	bl	8001f98 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002bb8:	b014      	add	sp, #80	; 0x50
 8002bba:	bd10      	pop	{r4, pc}
 8002bbc:	0000      	movs	r0, r0
	...

08002bc0 <main>:
{
 8002bc0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc4:	4db6      	ldr	r5, [pc, #728]	; (8002ea0 <main+0x2e0>)
{
 8002bc6:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8002bc8:	f7fe fa4a 	bl	8001060 <HAL_Init>
  SystemClock_Config();
 8002bcc:	f7ff ffbe 	bl	8002b4c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	2210      	movs	r2, #16
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	a80d      	add	r0, sp, #52	; 0x34
 8002bd6:	f000 fb1d 	bl	8003214 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bda:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : Steering_Reset_Pin_Pin Steering_Input_Green_Pin */
  GPIO_InitStruct.Pin = Steering_Reset_Pin_Pin|Steering_Input_Green_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bdc:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bde:	f043 0320 	orr.w	r3, r3, #32
 8002be2:	61ab      	str	r3, [r5, #24]
 8002be4:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	a90d      	add	r1, sp, #52	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	9304      	str	r3, [sp, #16]
 8002bee:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	48ac      	ldr	r0, [pc, #688]	; (8002ea4 <main+0x2e4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	61ab      	str	r3, [r5, #24]
 8002bfa:	69ab      	ldr	r3, [r5, #24]

  /*Configure GPIO pin : Steering_Input_White_Pin */
  GPIO_InitStruct.Pin = Steering_Input_White_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bfc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	9305      	str	r3, [sp, #20]
 8002c04:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c06:	69ab      	ldr	r3, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c08:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	f043 0308 	orr.w	r3, r3, #8
 8002c10:	61ab      	str	r3, [r5, #24]
 8002c12:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c14:	960f      	str	r6, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	9306      	str	r3, [sp, #24]
 8002c1c:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Pin = Steering_Reset_Pin_Pin|Steering_Input_Green_Pin;
 8002c1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c22:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c24:	4ba0      	ldr	r3, [pc, #640]	; (8002ea8 <main+0x2e8>)
  hadc1.Instance = ADC1;
 8002c26:	4fa1      	ldr	r7, [pc, #644]	; (8002eac <main+0x2ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c28:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f7fe fe49 	bl	80018c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Steering_Input_White_Pin;
 8002c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(Steering_Input_White_GPIO_Port, &GPIO_InitStruct);
 8002c32:	a90d      	add	r1, sp, #52	; 0x34
 8002c34:	489b      	ldr	r0, [pc, #620]	; (8002ea4 <main+0x2e4>)
  GPIO_InitStruct.Pin = Steering_Input_White_Pin;
 8002c36:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c38:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(Steering_Input_White_GPIO_Port, &GPIO_InitStruct);
 8002c3c:	f7fe fe40 	bl	80018c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c40:	4622      	mov	r2, r4
 8002c42:	4621      	mov	r1, r4
 8002c44:	2028      	movs	r0, #40	; 0x28
 8002c46:	f7fe fce3 	bl	8001610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c4a:	2028      	movs	r0, #40	; 0x28
 8002c4c:	f7fe fd14 	bl	8001678 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c50:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c52:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c54:	4333      	orrs	r3, r6
 8002c56:	616b      	str	r3, [r5, #20]
 8002c58:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c5a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c5c:	4033      	ands	r3, r6
 8002c5e:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c60:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c62:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c64:	f7fe fcd4 	bl	8001610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c68:	200b      	movs	r0, #11
 8002c6a:	f7fe fd05 	bl	8001678 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c6e:	2210      	movs	r2, #16
 8002c70:	4621      	mov	r1, r4
 8002c72:	a809      	add	r0, sp, #36	; 0x24
 8002c74:	f000 face 	bl	8003214 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c78:	4621      	mov	r1, r4
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	a80d      	add	r0, sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7e:	9407      	str	r4, [sp, #28]
 8002c80:	9408      	str	r4, [sp, #32]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c82:	f000 fac7 	bl	8003214 <memset>
  htim2.Init.Prescaler = 548;
 8002c86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c8a:	f44f 7309 	mov.w	r3, #548	; 0x224
  htim2.Instance = TIM2;
 8002c8e:	4d88      	ldr	r5, [pc, #544]	; (8002eb0 <main+0x2f0>)
  hadc1.Init.NbrOfConversion = 3;
 8002c90:	f04f 0803 	mov.w	r8, #3
  htim2.Init.Prescaler = 548;
 8002c94:	e885 000c 	stmia.w	r5, {r2, r3}
  htim2.Init.Period = 65535;
 8002c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c9c:	4628      	mov	r0, r5
  htim2.Init.Period = 65535;
 8002c9e:	60eb      	str	r3, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca2:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ca6:	f7ff fc09 	bl	80024bc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002caa:	a909      	add	r1, sp, #36	; 0x24
 8002cac:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cae:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cb2:	f7ff fa6c 	bl	800218e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f7ff fc34 	bl	8002524 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cbc:	a907      	add	r1, sp, #28
 8002cbe:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cc0:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cc2:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cc4:	f7ff fdd6 	bl	8002874 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigIC.ICFilter = 15;
 8002cc8:	220f      	movs	r2, #15
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002cca:	2302      	movs	r3, #2
  sConfigIC.ICFilter = 15;
 8002ccc:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cce:	a90d      	add	r1, sp, #52	; 0x34
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	4628      	mov	r0, r5
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8002cd6:	9301      	str	r3, [sp, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cd8:	960e      	str	r6, [sp, #56]	; 0x38
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cda:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cdc:	f7ff fcf4 	bl	80026c8 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	a90d      	add	r1, sp, #52	; 0x34
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f7ff fcef 	bl	80026c8 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002cea:	2208      	movs	r2, #8
 8002cec:	a90d      	add	r1, sp, #52	; 0x34
 8002cee:	4628      	mov	r0, r5
 8002cf0:	f7ff fcea 	bl	80026c8 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002cf4:	a90d      	add	r1, sp, #52	; 0x34
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f7ff fce5 	bl	80026c8 <HAL_TIM_IC_ConfigChannel>
  hadc1.Instance = ADC1;
 8002cfe:	4a6d      	ldr	r2, [pc, #436]	; (8002eb4 <main+0x2f4>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d00:	4638      	mov	r0, r7
  hadc1.Instance = ADC1;
 8002d02:	603a      	str	r2, [r7, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d08:	60ba      	str	r2, [r7, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002d0e:	60fe      	str	r6, [r7, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d10:	61fa      	str	r2, [r7, #28]
  hadc1.Init.NbrOfConversion = 3;
 8002d12:	f8c7 8010 	str.w	r8, [r7, #16]
  sConfig.Channel = ADC_CHANNEL_4;
 8002d16:	f04f 0904 	mov.w	r9, #4
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d1a:	617c      	str	r4, [r7, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d1c:	607c      	str	r4, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d1e:	940d      	str	r4, [sp, #52]	; 0x34
 8002d20:	940e      	str	r4, [sp, #56]	; 0x38
 8002d22:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d24:	f7fe fbe0 	bl	80014e8 <HAL_ADC_Init>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d28:	960e      	str	r6, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002d2a:	2606      	movs	r6, #6
  sConfig.Channel = ADC_CHANNEL_5;
 8002d2c:	f04f 0b05 	mov.w	fp, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d30:	a90d      	add	r1, sp, #52	; 0x34
 8002d32:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_4;
 8002d34:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002d38:	960f      	str	r6, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d3a:	f7fe fa69 	bl	8001210 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d3e:	9b01      	ldr	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d40:	a90d      	add	r1, sp, #52	; 0x34
 8002d42:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d44:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 8002d46:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4a:	f7fe fa61 	bl	8001210 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d4e:	a90d      	add	r1, sp, #52	; 0x34
 8002d50:	4638      	mov	r0, r7
  sConfig.Channel = ADC_CHANNEL_6;
 8002d52:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d54:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d58:	f7fe fa5a 	bl	8001210 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d5c:	2210      	movs	r2, #16
 8002d5e:	4621      	mov	r1, r4
 8002d60:	a809      	add	r0, sp, #36	; 0x24
 8002d62:	f000 fa57 	bl	8003214 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d66:	221c      	movs	r2, #28
 8002d68:	4621      	mov	r1, r4
 8002d6a:	a80d      	add	r0, sp, #52	; 0x34
  htim4.Instance = TIM4;
 8002d6c:	4e52      	ldr	r6, [pc, #328]	; (8002eb8 <main+0x2f8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6e:	9407      	str	r4, [sp, #28]
 8002d70:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d72:	f000 fa4f 	bl	8003214 <memset>
  htim4.Instance = TIM4;
 8002d76:	4b51      	ldr	r3, [pc, #324]	; (8002ebc <main+0x2fc>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d78:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 5;
 8002d7a:	e886 0808 	stmia.w	r6, {r3, fp}
  htim4.Init.Period = 58139;
 8002d7e:	f24e 331b 	movw	r3, #58139	; 0xe31b
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d82:	60b4      	str	r4, [r6, #8]
  htim4.Init.Period = 58139;
 8002d84:	60f3      	str	r3, [r6, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d86:	6134      	str	r4, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d88:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d8a:	f7ff fb97 	bl	80024bc <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d8e:	a909      	add	r1, sp, #36	; 0x24
 8002d90:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d92:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d96:	f7ff f9fa 	bl	800218e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	f7ff fba8 	bl	80024f0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002da0:	a907      	add	r1, sp, #28
 8002da2:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002da4:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da6:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002da8:	f7ff fd64 	bl	8002874 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dac:	2360      	movs	r3, #96	; 0x60
 8002dae:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 500;
 8002db0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002db4:	4622      	mov	r2, r4
 8002db6:	a90d      	add	r1, sp, #52	; 0x34
 8002db8:	4630      	mov	r0, r6
  sConfigOC.Pulse = 500;
 8002dba:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dbc:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dbe:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dc0:	f7ff fbf6 	bl	80025b0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f000 f961 	bl	800308c <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start(&htim2);
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f7ff f9d0 	bl	8002170 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f7ff fd22 	bl	800281c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 8002dd8:	4649      	mov	r1, r9
 8002dda:	4628      	mov	r0, r5
 8002ddc:	f7ff fd1e 	bl	800281c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_3);
 8002de0:	2108      	movs	r1, #8
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7ff fd1a 	bl	800281c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_4);
 8002de8:	210c      	movs	r1, #12
 8002dea:	4628      	mov	r0, r5
 8002dec:	f7ff fd16 	bl	800281c <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8002df0:	4621      	mov	r1, r4
 8002df2:	4630      	mov	r0, r6
 8002df4:	f7ff fcfc 	bl	80027f0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)potVal,3);
 8002df8:	4642      	mov	r2, r8
    distance[0]=(1/76.846)*(potVal[0]+134.17);
 8002dfa:	f20f 098c 	addw	r9, pc, #140	; 0x8c
 8002dfe:	e9d9 8900 	ldrd	r8, r9, [r9]
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)potVal,3);
 8002e02:	4638      	mov	r0, r7
    distance[1]=(1/0.15)*(log(potVal[1]-1));
 8002e04:	a722      	add	r7, pc, #136	; (adr r7, 8002e90 <main+0x2d0>)
 8002e06:	e9d7 6700 	ldrd	r6, r7, [r7]
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)potVal,3);
 8002e0a:	492d      	ldr	r1, [pc, #180]	; (8002ec0 <main+0x300>)
 8002e0c:	f7fe fabc 	bl	8001388 <HAL_ADC_Start_DMA>
    distance[0]=(1/76.846)*(potVal[0]+134.17);
 8002e10:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002ec0 <main+0x300>
	averageWheelSpeed();
 8002e14:	f7ff fe5e 	bl	8002ad4 <averageWheelSpeed>
    distance[0]=(1/76.846)*(potVal[0]+134.17);
 8002e18:	f8ba 0000 	ldrh.w	r0, [sl]
 8002e1c:	f7fd faea 	bl	80003f4 <__aeabi_i2d>
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	f7fd f99a 	bl	800015c <__adddf3>
 8002e28:	a31b      	add	r3, pc, #108	; (adr r3, 8002e98 <main+0x2d8>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f7fd fb47 	bl	80004c0 <__aeabi_dmul>
 8002e32:	4d24      	ldr	r5, [pc, #144]	; (8002ec4 <main+0x304>)
    finalDistance[0]=distance[0];
 8002e34:	4c24      	ldr	r4, [pc, #144]	; (8002ec8 <main+0x308>)
    distance[0]=(1/76.846)*(potVal[0]+134.17);
 8002e36:	e9c5 0100 	strd	r0, r1, [r5]
    finalDistance[0]=distance[0];
 8002e3a:	f7fd fdf1 	bl	8000a20 <__aeabi_d2iz>
 8002e3e:	6020      	str	r0, [r4, #0]
    distance[1]=(1/0.15)*(log(potVal[1]-1));
 8002e40:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8002e44:	3801      	subs	r0, #1
 8002e46:	f7fd fad5 	bl	80003f4 <__aeabi_i2d>
 8002e4a:	f000 f9eb 	bl	8003224 <log>
 8002e4e:	4632      	mov	r2, r6
 8002e50:	463b      	mov	r3, r7
 8002e52:	f7fd fb35 	bl	80004c0 <__aeabi_dmul>
 8002e56:	e9c5 0102 	strd	r0, r1, [r5, #8]
    finalDistance[1]=distance[1];
 8002e5a:	f7fd fde1 	bl	8000a20 <__aeabi_d2iz>
 8002e5e:	6060      	str	r0, [r4, #4]
    distance[2]=(1/0.15)*(log(potVal[2]-1));
 8002e60:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8002e64:	3801      	subs	r0, #1
 8002e66:	f7fd fac5 	bl	80003f4 <__aeabi_i2d>
 8002e6a:	f000 f9db 	bl	8003224 <log>
 8002e6e:	4632      	mov	r2, r6
 8002e70:	463b      	mov	r3, r7
 8002e72:	f7fd fb25 	bl	80004c0 <__aeabi_dmul>
 8002e76:	e9c5 0104 	strd	r0, r1, [r5, #16]
    finalDistance[2]=distance[2];
 8002e7a:	f7fd fdd1 	bl	8000a20 <__aeabi_d2iz>
 8002e7e:	60a0      	str	r0, [r4, #8]
 8002e80:	e7c6      	b.n	8002e10 <main+0x250>
 8002e82:	bf00      	nop
 8002e84:	f3af 8000 	nop.w
 8002e88:	a3d70a3d 	.word	0xa3d70a3d
 8002e8c:	4060c570 	.word	0x4060c570
 8002e90:	aaaaaaab 	.word	0xaaaaaaab
 8002e94:	401aaaaa 	.word	0x401aaaaa
 8002e98:	89a6a07a 	.word	0x89a6a07a
 8002e9c:	3f8aa694 	.word	0x3f8aa694
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40010800 	.word	0x40010800
 8002ea8:	10110000 	.word	0x10110000
 8002eac:	20000154 	.word	0x20000154
 8002eb0:	200001c8 	.word	0x200001c8
 8002eb4:	40012400 	.word	0x40012400
 8002eb8:	20000114 	.word	0x20000114
 8002ebc:	40000800 	.word	0x40000800
 8002ec0:	200000f4 	.word	0x200000f4
 8002ec4:	20000098 	.word	0x20000098
 8002ec8:	200000b0 	.word	0x200000b0

08002ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed0:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_MspInit+0x3c>)
{
 8002ed2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ed4:	699a      	ldr	r2, [r3, #24]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	619a      	str	r2, [r3, #24]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	f002 0201 	and.w	r2, r2, #1
 8002ee2:	9200      	str	r2, [sp, #0]
 8002ee4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002eec:	61da      	str	r2, [r3, #28]
 8002eee:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002efa:	6853      	ldr	r3, [r2, #4]
 8002efc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f06:	b002      	add	sp, #8
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40010000 	.word	0x40010000

08002f14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f14:	b530      	push	{r4, r5, lr}
 8002f16:	4605      	mov	r5, r0
 8002f18:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	a802      	add	r0, sp, #8
 8002f20:	f000 f978 	bl	8003214 <memset>
  if(hadc->Instance==ADC1)
 8002f24:	682a      	ldr	r2, [r5, #0]
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_ADC_MspInit+0x98>)
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d13c      	bne.n	8002fa6 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f2c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002f30:	699a      	ldr	r2, [r3, #24]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = Linear_Pot1_Pin|Linear_Pot2_Pin|Linear_Pot3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f32:	481f      	ldr	r0, [pc, #124]	; (8002fb0 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	619a      	str	r2, [r3, #24]
 8002f3a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f3e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002f42:	9200      	str	r2, [sp, #0]
 8002f44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f48:	4c1a      	ldr	r4, [pc, #104]	; (8002fb4 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4a:	f042 0204 	orr.w	r2, r2, #4
 8002f4e:	619a      	str	r2, [r3, #24]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Linear_Pot1_Pin|Linear_Pot2_Pin|Linear_Pot3_Pin;
 8002f5a:	2370      	movs	r3, #112	; 0x70
 8002f5c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f62:	f7fe fcad 	bl	80018c0 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6e:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Instance = DMA1_Channel1;
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_ADC_MspInit+0xa4>)
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f76:	6162      	str	r2, [r4, #20]
    hdma_adc1.Instance = DMA1_Channel1;
 8002f78:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f7a:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f7c:	2300      	movs	r3, #0
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f7e:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f80:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f82:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f84:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f86:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f88:	f7fe fb98 	bl	80016bc <HAL_DMA_Init>
 8002f8c:	b108      	cbz	r0, 8002f92 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8002f8e:	f7ff ff9d 	bl	8002ecc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f92:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f94:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f96:	2012      	movs	r0, #18
 8002f98:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f9a:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f9c:	f7fe fb38 	bl	8001610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002fa0:	2012      	movs	r0, #18
 8002fa2:	f7fe fb69 	bl	8001678 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fa6:	b007      	add	sp, #28
 8002fa8:	bd30      	pop	{r4, r5, pc}
 8002faa:	bf00      	nop
 8002fac:	40012400 	.word	0x40012400
 8002fb0:	40010800 	.word	0x40010800
 8002fb4:	20000184 	.word	0x20000184
 8002fb8:	40020008 	.word	0x40020008

08002fbc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	2210      	movs	r2, #16
{
 8002fbe:	b530      	push	{r4, r5, lr}
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	eb0d 0002 	add.w	r0, sp, r2
 8002fca:	f000 f923 	bl	8003214 <memset>
  if(htim_base->Instance==TIM2)
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d141      	bne.n	800305a <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fd6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002fda:	69da      	ldr	r2, [r3, #28]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = Speed1_Pin|Speed2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fdc:	2501      	movs	r5, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	61da      	str	r2, [r3, #28]
 8002fe4:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe6:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe8:	f002 0201 	and.w	r2, r2, #1
 8002fec:	9200      	str	r2, [sp, #0]
 8002fee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	4821      	ldr	r0, [pc, #132]	; (8003078 <HAL_TIM_Base_MspInit+0xbc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	f042 0204 	orr.w	r2, r2, #4
 8002ff8:	619a      	str	r2, [r3, #24]
 8002ffa:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = Speed3_Pin|Speed3B11_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ffc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffe:	f002 0204 	and.w	r2, r2, #4
 8003002:	9201      	str	r2, [sp, #4]
 8003004:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	f042 0208 	orr.w	r2, r2, #8
 800300c:	619a      	str	r2, [r3, #24]
 800300e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003010:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = Speed1_Pin|Speed2_Pin;
 800301a:	2303      	movs	r3, #3
 800301c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	f7fe fc4f 	bl	80018c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Speed3_Pin|Speed3B11_Pin;
 8003022:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	a904      	add	r1, sp, #16
 8003028:	4814      	ldr	r0, [pc, #80]	; (800307c <HAL_TIM_Base_MspInit+0xc0>)
    GPIO_InitStruct.Pin = Speed3_Pin|Speed3B11_Pin;
 800302a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800302e:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003030:	f7fe fc46 	bl	80018c0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003034:	4a12      	ldr	r2, [pc, #72]	; (8003080 <HAL_TIM_Base_MspInit+0xc4>)

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003036:	201c      	movs	r0, #28
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8003038:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800303a:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003048:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800304a:	4622      	mov	r2, r4
 800304c:	f7fe fae0 	bl	8001610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003050:	201c      	movs	r0, #28
 8003052:	f7fe fb11 	bl	8001678 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003056:	b009      	add	sp, #36	; 0x24
 8003058:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM4)
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_TIM_Base_MspInit+0xc8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d1fa      	bne.n	8003056 <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_TIM_Base_MspInit+0xcc>)
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	f042 0204 	orr.w	r2, r2, #4
 8003068:	61da      	str	r2, [r3, #28]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	9303      	str	r3, [sp, #12]
 8003072:	9b03      	ldr	r3, [sp, #12]
}
 8003074:	e7ef      	b.n	8003056 <HAL_TIM_Base_MspInit+0x9a>
 8003076:	bf00      	nop
 8003078:	40010800 	.word	0x40010800
 800307c:	40010c00 	.word	0x40010c00
 8003080:	40010000 	.word	0x40010000
 8003084:	40000800 	.word	0x40000800
 8003088:	40021000 	.word	0x40021000

0800308c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800308c:	b510      	push	{r4, lr}
 800308e:	4604      	mov	r4, r0
 8003090:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003092:	2210      	movs	r2, #16
 8003094:	2100      	movs	r1, #0
 8003096:	a802      	add	r0, sp, #8
 8003098:	f000 f8bc 	bl	8003214 <memset>
  if(htim->Instance==TIM4)
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <HAL_TIM_MspPostInit+0x44>)
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d113      	bne.n	80030cc <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80030a8:	699a      	ldr	r2, [r3, #24]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030aa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ac:	f042 0208 	orr.w	r2, r2, #8
 80030b0:	619a      	str	r2, [r3, #24]
 80030b2:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b4:	4807      	ldr	r0, [pc, #28]	; (80030d4 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030be:	2340      	movs	r3, #64	; 0x40
 80030c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c8:	f7fe fbfa 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80030cc:	b006      	add	sp, #24
 80030ce:	bd10      	pop	{r4, pc}
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40010c00 	.word	0x40010c00

080030d8 <NMI_Handler>:
 80030d8:	4770      	bx	lr

080030da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030da:	e7fe      	b.n	80030da <HardFault_Handler>

080030dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030dc:	e7fe      	b.n	80030dc <MemManage_Handler>

080030de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030de:	e7fe      	b.n	80030de <BusFault_Handler>

080030e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030e0:	e7fe      	b.n	80030e0 <UsageFault_Handler>

080030e2 <SVC_Handler>:
 80030e2:	4770      	bx	lr

080030e4 <DebugMon_Handler>:
 80030e4:	4770      	bx	lr

080030e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030e6:	4770      	bx	lr

080030e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e8:	f7fd bfcc 	b.w	8001084 <HAL_IncTick>

080030ec <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030ec:	4801      	ldr	r0, [pc, #4]	; (80030f4 <DMA1_Channel1_IRQHandler+0x8>)
 80030ee:	f7fe bb53 	b.w	8001798 <HAL_DMA_IRQHandler>
 80030f2:	bf00      	nop
 80030f4:	20000184 	.word	0x20000184

080030f8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030f8:	4801      	ldr	r0, [pc, #4]	; (8003100 <ADC1_2_IRQHandler+0x8>)
 80030fa:	f7fe b804 	b.w	8001106 <HAL_ADC_IRQHandler>
 80030fe:	bf00      	nop
 8003100:	20000154 	.word	0x20000154

08003104 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003104:	4801      	ldr	r0, [pc, #4]	; (800310c <TIM2_IRQHandler+0x8>)
 8003106:	f7ff b8ff 	b.w	8002308 <HAL_TIM_IRQHandler>
 800310a:	bf00      	nop
 800310c:	200001c8 	.word	0x200001c8

08003110 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003110:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003112:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003116:	f7fe fcb9 	bl	8001a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800311a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800311e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003122:	f7fe bcb3 	b.w	8001a8c <HAL_GPIO_EXTI_IRQHandler>
	...

08003128 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <SystemInit+0x40>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <SystemInit+0x44>)
 8003136:	400a      	ands	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003140:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003144:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800314c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003154:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003156:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800315a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800315c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003160:	4b03      	ldr	r3, [pc, #12]	; (8003170 <SystemInit+0x48>)
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	f8ff0000 	.word	0xf8ff0000
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003174:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003176:	e003      	b.n	8003180 <LoopCopyDataInit>

08003178 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800317a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800317c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800317e:	3104      	adds	r1, #4

08003180 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003184:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003186:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003188:	d3f6      	bcc.n	8003178 <CopyDataInit>
  ldr r2, =_sbss
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800318c:	e002      	b.n	8003194 <LoopFillZerobss>

0800318e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003190:	f842 3b04 	str.w	r3, [r2], #4

08003194 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003196:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003198:	d3f9      	bcc.n	800318e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800319a:	f7ff ffc5 	bl	8003128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319e:	f000 f815 	bl	80031cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031a2:	f7ff fd0d 	bl	8002bc0 <main>
  bx lr
 80031a6:	4770      	bx	lr
  ldr r3, =_sidata
 80031a8:	08003714 	.word	0x08003714
  ldr r0, =_sdata
 80031ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031b0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80031b4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80031b8:	20000208 	.word	0x20000208

080031bc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <CAN1_RX1_IRQHandler>
	...

080031c0 <__errno>:
 80031c0:	4b01      	ldr	r3, [pc, #4]	; (80031c8 <__errno+0x8>)
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000010 	.word	0x20000010

080031cc <__libc_init_array>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	2500      	movs	r5, #0
 80031d0:	4e0c      	ldr	r6, [pc, #48]	; (8003204 <__libc_init_array+0x38>)
 80031d2:	4c0d      	ldr	r4, [pc, #52]	; (8003208 <__libc_init_array+0x3c>)
 80031d4:	1ba4      	subs	r4, r4, r6
 80031d6:	10a4      	asrs	r4, r4, #2
 80031d8:	42a5      	cmp	r5, r4
 80031da:	d109      	bne.n	80031f0 <__libc_init_array+0x24>
 80031dc:	f000 fa78 	bl	80036d0 <_init>
 80031e0:	2500      	movs	r5, #0
 80031e2:	4e0a      	ldr	r6, [pc, #40]	; (800320c <__libc_init_array+0x40>)
 80031e4:	4c0a      	ldr	r4, [pc, #40]	; (8003210 <__libc_init_array+0x44>)
 80031e6:	1ba4      	subs	r4, r4, r6
 80031e8:	10a4      	asrs	r4, r4, #2
 80031ea:	42a5      	cmp	r5, r4
 80031ec:	d105      	bne.n	80031fa <__libc_init_array+0x2e>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031f4:	4798      	blx	r3
 80031f6:	3501      	adds	r5, #1
 80031f8:	e7ee      	b.n	80031d8 <__libc_init_array+0xc>
 80031fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031fe:	4798      	blx	r3
 8003200:	3501      	adds	r5, #1
 8003202:	e7f2      	b.n	80031ea <__libc_init_array+0x1e>
 8003204:	0800370c 	.word	0x0800370c
 8003208:	0800370c 	.word	0x0800370c
 800320c:	0800370c 	.word	0x0800370c
 8003210:	08003710 	.word	0x08003710

08003214 <memset>:
 8003214:	4603      	mov	r3, r0
 8003216:	4402      	add	r2, r0
 8003218:	4293      	cmp	r3, r2
 800321a:	d100      	bne.n	800321e <memset+0xa>
 800321c:	4770      	bx	lr
 800321e:	f803 1b01 	strb.w	r1, [r3], #1
 8003222:	e7f9      	b.n	8003218 <memset+0x4>

08003224 <log>:
 8003224:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8003228:	b08a      	sub	sp, #40	; 0x28
 800322a:	4604      	mov	r4, r0
 800322c:	460d      	mov	r5, r1
 800322e:	f000 f873 	bl	8003318 <__ieee754_log>
 8003232:	4b34      	ldr	r3, [pc, #208]	; (8003304 <log+0xe0>)
 8003234:	4680      	mov	r8, r0
 8003236:	f993 6000 	ldrsb.w	r6, [r3]
 800323a:	4689      	mov	r9, r1
 800323c:	1c73      	adds	r3, r6, #1
 800323e:	d05b      	beq.n	80032f8 <log+0xd4>
 8003240:	4622      	mov	r2, r4
 8003242:	462b      	mov	r3, r5
 8003244:	4620      	mov	r0, r4
 8003246:	4629      	mov	r1, r5
 8003248:	f7fd fbd4 	bl	80009f4 <__aeabi_dcmpun>
 800324c:	2800      	cmp	r0, #0
 800324e:	d153      	bne.n	80032f8 <log+0xd4>
 8003250:	2200      	movs	r2, #0
 8003252:	2300      	movs	r3, #0
 8003254:	4620      	mov	r0, r4
 8003256:	4629      	mov	r1, r5
 8003258:	f7fd fbc2 	bl	80009e0 <__aeabi_dcmpgt>
 800325c:	2800      	cmp	r0, #0
 800325e:	d14b      	bne.n	80032f8 <log+0xd4>
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <log+0xe4>)
 8003262:	9008      	str	r0, [sp, #32]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800326a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800326e:	b9a6      	cbnz	r6, 800329a <log+0x76>
 8003270:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <log+0xe8>)
 8003276:	4620      	mov	r0, r4
 8003278:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800327c:	4629      	mov	r1, r5
 800327e:	2200      	movs	r2, #0
 8003280:	2300      	movs	r3, #0
 8003282:	f7fd fb85 	bl	8000990 <__aeabi_dcmpeq>
 8003286:	bb40      	cbnz	r0, 80032da <log+0xb6>
 8003288:	2301      	movs	r3, #1
 800328a:	2e02      	cmp	r6, #2
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	d119      	bne.n	80032c4 <log+0xa0>
 8003290:	f7ff ff96 	bl	80031c0 <__errno>
 8003294:	2321      	movs	r3, #33	; 0x21
 8003296:	6003      	str	r3, [r0, #0]
 8003298:	e019      	b.n	80032ce <log+0xaa>
 800329a:	2200      	movs	r2, #0
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <log+0xec>)
 800329e:	4620      	mov	r0, r4
 80032a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032a4:	4629      	mov	r1, r5
 80032a6:	2200      	movs	r2, #0
 80032a8:	2300      	movs	r3, #0
 80032aa:	f7fd fb71 	bl	8000990 <__aeabi_dcmpeq>
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d0ea      	beq.n	8003288 <log+0x64>
 80032b2:	2302      	movs	r3, #2
 80032b4:	429e      	cmp	r6, r3
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	d111      	bne.n	80032de <log+0xba>
 80032ba:	f7ff ff81 	bl	80031c0 <__errno>
 80032be:	2322      	movs	r3, #34	; 0x22
 80032c0:	6003      	str	r3, [r0, #0]
 80032c2:	e011      	b.n	80032e8 <log+0xc4>
 80032c4:	4668      	mov	r0, sp
 80032c6:	f000 f9fb 	bl	80036c0 <matherr>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d0e0      	beq.n	8003290 <log+0x6c>
 80032ce:	4811      	ldr	r0, [pc, #68]	; (8003314 <log+0xf0>)
 80032d0:	f000 f9f8 	bl	80036c4 <nan>
 80032d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80032d8:	e006      	b.n	80032e8 <log+0xc4>
 80032da:	2302      	movs	r3, #2
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	4668      	mov	r0, sp
 80032e0:	f000 f9ee 	bl	80036c0 <matherr>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d0e8      	beq.n	80032ba <log+0x96>
 80032e8:	9b08      	ldr	r3, [sp, #32]
 80032ea:	b11b      	cbz	r3, 80032f4 <log+0xd0>
 80032ec:	f7ff ff68 	bl	80031c0 <__errno>
 80032f0:	9b08      	ldr	r3, [sp, #32]
 80032f2:	6003      	str	r3, [r0, #0]
 80032f4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80032f8:	4640      	mov	r0, r8
 80032fa:	4649      	mov	r1, r9
 80032fc:	b00a      	add	sp, #40	; 0x28
 80032fe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8003302:	bf00      	nop
 8003304:	20000074 	.word	0x20000074
 8003308:	08003708 	.word	0x08003708
 800330c:	c7efffff 	.word	0xc7efffff
 8003310:	fff00000 	.word	0xfff00000
 8003314:	0800370b 	.word	0x0800370b

08003318 <__ieee754_log>:
 8003318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003320:	b087      	sub	sp, #28
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4604      	mov	r4, r0
 8003328:	460d      	mov	r5, r1
 800332a:	da24      	bge.n	8003376 <__ieee754_log+0x5e>
 800332c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8003330:	4334      	orrs	r4, r6
 8003332:	d108      	bne.n	8003346 <__ieee754_log+0x2e>
 8003334:	2200      	movs	r2, #0
 8003336:	2300      	movs	r3, #0
 8003338:	2000      	movs	r0, #0
 800333a:	49c9      	ldr	r1, [pc, #804]	; (8003660 <__ieee754_log+0x348>)
 800333c:	f7fd f9ea 	bl	8000714 <__aeabi_ddiv>
 8003340:	b007      	add	sp, #28
 8003342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003346:	2900      	cmp	r1, #0
 8003348:	da04      	bge.n	8003354 <__ieee754_log+0x3c>
 800334a:	f7fc ff05 	bl	8000158 <__aeabi_dsub>
 800334e:	2200      	movs	r2, #0
 8003350:	2300      	movs	r3, #0
 8003352:	e7f3      	b.n	800333c <__ieee754_log+0x24>
 8003354:	2200      	movs	r2, #0
 8003356:	4bc3      	ldr	r3, [pc, #780]	; (8003664 <__ieee754_log+0x34c>)
 8003358:	f7fd f8b2 	bl	80004c0 <__aeabi_dmul>
 800335c:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	460d      	mov	r5, r1
 8003366:	49c0      	ldr	r1, [pc, #768]	; (8003668 <__ieee754_log+0x350>)
 8003368:	428d      	cmp	r5, r1
 800336a:	dd06      	ble.n	800337a <__ieee754_log+0x62>
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	f7fc fef4 	bl	800015c <__adddf3>
 8003374:	e7e4      	b.n	8003340 <__ieee754_log+0x28>
 8003376:	2600      	movs	r6, #0
 8003378:	e7f5      	b.n	8003366 <__ieee754_log+0x4e>
 800337a:	152c      	asrs	r4, r5, #20
 800337c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003380:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8003384:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003388:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800338c:	4426      	add	r6, r4
 800338e:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8003392:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8003396:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800339a:	ea41 0305 	orr.w	r3, r1, r5
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	2200      	movs	r2, #0
 80033a4:	4bb1      	ldr	r3, [pc, #708]	; (800366c <__ieee754_log+0x354>)
 80033a6:	f7fc fed7 	bl	8000158 <__aeabi_dsub>
 80033aa:	1cab      	adds	r3, r5, #2
 80033ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 80033b6:	4682      	mov	sl, r0
 80033b8:	468b      	mov	fp, r1
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	dc5b      	bgt.n	8003478 <__ieee754_log+0x160>
 80033c0:	2300      	movs	r3, #0
 80033c2:	f7fd fae5 	bl	8000990 <__aeabi_dcmpeq>
 80033c6:	b1d0      	cbz	r0, 80033fe <__ieee754_log+0xe6>
 80033c8:	2c00      	cmp	r4, #0
 80033ca:	f000 816e 	beq.w	80036aa <__ieee754_log+0x392>
 80033ce:	4620      	mov	r0, r4
 80033d0:	f7fd f810 	bl	80003f4 <__aeabi_i2d>
 80033d4:	a38e      	add	r3, pc, #568	; (adr r3, 8003610 <__ieee754_log+0x2f8>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	4606      	mov	r6, r0
 80033dc:	460f      	mov	r7, r1
 80033de:	f7fd f86f 	bl	80004c0 <__aeabi_dmul>
 80033e2:	a38d      	add	r3, pc, #564	; (adr r3, 8003618 <__ieee754_log+0x300>)
 80033e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e8:	4604      	mov	r4, r0
 80033ea:	460d      	mov	r5, r1
 80033ec:	4630      	mov	r0, r6
 80033ee:	4639      	mov	r1, r7
 80033f0:	f7fd f866 	bl	80004c0 <__aeabi_dmul>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4620      	mov	r0, r4
 80033fa:	4629      	mov	r1, r5
 80033fc:	e7b8      	b.n	8003370 <__ieee754_log+0x58>
 80033fe:	a388      	add	r3, pc, #544	; (adr r3, 8003620 <__ieee754_log+0x308>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	4650      	mov	r0, sl
 8003406:	4659      	mov	r1, fp
 8003408:	f7fd f85a 	bl	80004c0 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	2000      	movs	r0, #0
 8003412:	4997      	ldr	r1, [pc, #604]	; (8003670 <__ieee754_log+0x358>)
 8003414:	f7fc fea0 	bl	8000158 <__aeabi_dsub>
 8003418:	4652      	mov	r2, sl
 800341a:	4606      	mov	r6, r0
 800341c:	460f      	mov	r7, r1
 800341e:	465b      	mov	r3, fp
 8003420:	4650      	mov	r0, sl
 8003422:	4659      	mov	r1, fp
 8003424:	f7fd f84c 	bl	80004c0 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4630      	mov	r0, r6
 800342e:	4639      	mov	r1, r7
 8003430:	f7fd f846 	bl	80004c0 <__aeabi_dmul>
 8003434:	4606      	mov	r6, r0
 8003436:	460f      	mov	r7, r1
 8003438:	b934      	cbnz	r4, 8003448 <__ieee754_log+0x130>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4650      	mov	r0, sl
 8003440:	4659      	mov	r1, fp
 8003442:	f7fc fe89 	bl	8000158 <__aeabi_dsub>
 8003446:	e77b      	b.n	8003340 <__ieee754_log+0x28>
 8003448:	4620      	mov	r0, r4
 800344a:	f7fc ffd3 	bl	80003f4 <__aeabi_i2d>
 800344e:	a370      	add	r3, pc, #448	; (adr r3, 8003610 <__ieee754_log+0x2f8>)
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	4680      	mov	r8, r0
 8003456:	4689      	mov	r9, r1
 8003458:	f7fd f832 	bl	80004c0 <__aeabi_dmul>
 800345c:	a36e      	add	r3, pc, #440	; (adr r3, 8003618 <__ieee754_log+0x300>)
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	4604      	mov	r4, r0
 8003464:	460d      	mov	r5, r1
 8003466:	4640      	mov	r0, r8
 8003468:	4649      	mov	r1, r9
 800346a:	f7fd f829 	bl	80004c0 <__aeabi_dmul>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4630      	mov	r0, r6
 8003474:	4639      	mov	r1, r7
 8003476:	e0b2      	b.n	80035de <__ieee754_log+0x2c6>
 8003478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800347c:	f7fc fe6e 	bl	800015c <__adddf3>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4650      	mov	r0, sl
 8003486:	4659      	mov	r1, fp
 8003488:	f7fd f944 	bl	8000714 <__aeabi_ddiv>
 800348c:	e9cd 0100 	strd	r0, r1, [sp]
 8003490:	4620      	mov	r0, r4
 8003492:	f7fc ffaf 	bl	80003f4 <__aeabi_i2d>
 8003496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800349a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	f7fd f80d 	bl	80004c0 <__aeabi_dmul>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034ae:	f7fd f807 	bl	80004c0 <__aeabi_dmul>
 80034b2:	a35d      	add	r3, pc, #372	; (adr r3, 8003628 <__ieee754_log+0x310>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	4606      	mov	r6, r0
 80034ba:	460f      	mov	r7, r1
 80034bc:	f7fd f800 	bl	80004c0 <__aeabi_dmul>
 80034c0:	a35b      	add	r3, pc, #364	; (adr r3, 8003630 <__ieee754_log+0x318>)
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	f7fc fe49 	bl	800015c <__adddf3>
 80034ca:	4632      	mov	r2, r6
 80034cc:	463b      	mov	r3, r7
 80034ce:	f7fc fff7 	bl	80004c0 <__aeabi_dmul>
 80034d2:	a359      	add	r3, pc, #356	; (adr r3, 8003638 <__ieee754_log+0x320>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	f7fc fe40 	bl	800015c <__adddf3>
 80034dc:	4632      	mov	r2, r6
 80034de:	463b      	mov	r3, r7
 80034e0:	f7fc ffee 	bl	80004c0 <__aeabi_dmul>
 80034e4:	a356      	add	r3, pc, #344	; (adr r3, 8003640 <__ieee754_log+0x328>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f7fc fe37 	bl	800015c <__adddf3>
 80034ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034f2:	f7fc ffe5 	bl	80004c0 <__aeabi_dmul>
 80034f6:	a354      	add	r3, pc, #336	; (adr r3, 8003648 <__ieee754_log+0x330>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003500:	4630      	mov	r0, r6
 8003502:	4639      	mov	r1, r7
 8003504:	f7fc ffdc 	bl	80004c0 <__aeabi_dmul>
 8003508:	a351      	add	r3, pc, #324	; (adr r3, 8003650 <__ieee754_log+0x338>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f7fc fe25 	bl	800015c <__adddf3>
 8003512:	4632      	mov	r2, r6
 8003514:	463b      	mov	r3, r7
 8003516:	f7fc ffd3 	bl	80004c0 <__aeabi_dmul>
 800351a:	a34f      	add	r3, pc, #316	; (adr r3, 8003658 <__ieee754_log+0x340>)
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f7fc fe1c 	bl	800015c <__adddf3>
 8003524:	4632      	mov	r2, r6
 8003526:	463b      	mov	r3, r7
 8003528:	f7fc ffca 	bl	80004c0 <__aeabi_dmul>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003534:	f7fc fe12 	bl	800015c <__adddf3>
 8003538:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800353c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8003540:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8003544:	3551      	adds	r5, #81	; 0x51
 8003546:	ea45 0508 	orr.w	r5, r5, r8
 800354a:	2d00      	cmp	r5, #0
 800354c:	4606      	mov	r6, r0
 800354e:	460f      	mov	r7, r1
 8003550:	dd50      	ble.n	80035f4 <__ieee754_log+0x2dc>
 8003552:	2200      	movs	r2, #0
 8003554:	4b46      	ldr	r3, [pc, #280]	; (8003670 <__ieee754_log+0x358>)
 8003556:	4650      	mov	r0, sl
 8003558:	4659      	mov	r1, fp
 800355a:	f7fc ffb1 	bl	80004c0 <__aeabi_dmul>
 800355e:	4652      	mov	r2, sl
 8003560:	465b      	mov	r3, fp
 8003562:	f7fc ffad 	bl	80004c0 <__aeabi_dmul>
 8003566:	4680      	mov	r8, r0
 8003568:	4689      	mov	r9, r1
 800356a:	b994      	cbnz	r4, 8003592 <__ieee754_log+0x27a>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4630      	mov	r0, r6
 8003572:	4639      	mov	r1, r7
 8003574:	f7fc fdf2 	bl	800015c <__adddf3>
 8003578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800357c:	f7fc ffa0 	bl	80004c0 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4640      	mov	r0, r8
 8003586:	4649      	mov	r1, r9
 8003588:	f7fc fde6 	bl	8000158 <__aeabi_dsub>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	e755      	b.n	800343e <__ieee754_log+0x126>
 8003592:	a31f      	add	r3, pc, #124	; (adr r3, 8003610 <__ieee754_log+0x2f8>)
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800359c:	f7fc ff90 	bl	80004c0 <__aeabi_dmul>
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	4630      	mov	r0, r6
 80035aa:	4639      	mov	r1, r7
 80035ac:	f7fc fdd6 	bl	800015c <__adddf3>
 80035b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035b4:	f7fc ff84 	bl	80004c0 <__aeabi_dmul>
 80035b8:	a317      	add	r3, pc, #92	; (adr r3, 8003618 <__ieee754_log+0x300>)
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	4606      	mov	r6, r0
 80035c0:	460f      	mov	r7, r1
 80035c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035c6:	f7fc ff7b 	bl	80004c0 <__aeabi_dmul>
 80035ca:	4602      	mov	r2, r0
 80035cc:	460b      	mov	r3, r1
 80035ce:	4630      	mov	r0, r6
 80035d0:	4639      	mov	r1, r7
 80035d2:	f7fc fdc3 	bl	800015c <__adddf3>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4640      	mov	r0, r8
 80035dc:	4649      	mov	r1, r9
 80035de:	f7fc fdbb 	bl	8000158 <__aeabi_dsub>
 80035e2:	4652      	mov	r2, sl
 80035e4:	465b      	mov	r3, fp
 80035e6:	f7fc fdb7 	bl	8000158 <__aeabi_dsub>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4620      	mov	r0, r4
 80035f0:	4629      	mov	r1, r5
 80035f2:	e726      	b.n	8003442 <__ieee754_log+0x12a>
 80035f4:	2c00      	cmp	r4, #0
 80035f6:	d13d      	bne.n	8003674 <__ieee754_log+0x35c>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4650      	mov	r0, sl
 80035fe:	4659      	mov	r1, fp
 8003600:	f7fc fdaa 	bl	8000158 <__aeabi_dsub>
 8003604:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003608:	f7fc ff5a 	bl	80004c0 <__aeabi_dmul>
 800360c:	e7be      	b.n	800358c <__ieee754_log+0x274>
 800360e:	bf00      	nop
 8003610:	fee00000 	.word	0xfee00000
 8003614:	3fe62e42 	.word	0x3fe62e42
 8003618:	35793c76 	.word	0x35793c76
 800361c:	3dea39ef 	.word	0x3dea39ef
 8003620:	55555555 	.word	0x55555555
 8003624:	3fd55555 	.word	0x3fd55555
 8003628:	df3e5244 	.word	0xdf3e5244
 800362c:	3fc2f112 	.word	0x3fc2f112
 8003630:	96cb03de 	.word	0x96cb03de
 8003634:	3fc74664 	.word	0x3fc74664
 8003638:	94229359 	.word	0x94229359
 800363c:	3fd24924 	.word	0x3fd24924
 8003640:	55555593 	.word	0x55555593
 8003644:	3fe55555 	.word	0x3fe55555
 8003648:	d078c69f 	.word	0xd078c69f
 800364c:	3fc39a09 	.word	0x3fc39a09
 8003650:	1d8e78af 	.word	0x1d8e78af
 8003654:	3fcc71c5 	.word	0x3fcc71c5
 8003658:	9997fa04 	.word	0x9997fa04
 800365c:	3fd99999 	.word	0x3fd99999
 8003660:	c3500000 	.word	0xc3500000
 8003664:	43500000 	.word	0x43500000
 8003668:	7fefffff 	.word	0x7fefffff
 800366c:	3ff00000 	.word	0x3ff00000
 8003670:	3fe00000 	.word	0x3fe00000
 8003674:	a30e      	add	r3, pc, #56	; (adr r3, 80036b0 <__ieee754_log+0x398>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800367e:	f7fc ff1f 	bl	80004c0 <__aeabi_dmul>
 8003682:	4632      	mov	r2, r6
 8003684:	463b      	mov	r3, r7
 8003686:	4604      	mov	r4, r0
 8003688:	460d      	mov	r5, r1
 800368a:	4650      	mov	r0, sl
 800368c:	4659      	mov	r1, fp
 800368e:	f7fc fd63 	bl	8000158 <__aeabi_dsub>
 8003692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003696:	f7fc ff13 	bl	80004c0 <__aeabi_dmul>
 800369a:	a307      	add	r3, pc, #28	; (adr r3, 80036b8 <__ieee754_log+0x3a0>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	4606      	mov	r6, r0
 80036a2:	460f      	mov	r7, r1
 80036a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036a8:	e6df      	b.n	800346a <__ieee754_log+0x152>
 80036aa:	2000      	movs	r0, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	e647      	b.n	8003340 <__ieee754_log+0x28>
 80036b0:	fee00000 	.word	0xfee00000
 80036b4:	3fe62e42 	.word	0x3fe62e42
 80036b8:	35793c76 	.word	0x35793c76
 80036bc:	3dea39ef 	.word	0x3dea39ef

080036c0 <matherr>:
 80036c0:	2000      	movs	r0, #0
 80036c2:	4770      	bx	lr

080036c4 <nan>:
 80036c4:	2000      	movs	r0, #0
 80036c6:	4901      	ldr	r1, [pc, #4]	; (80036cc <nan+0x8>)
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	7ff80000 	.word	0x7ff80000

080036d0 <_init>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr

080036dc <_fini>:
 80036dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036de:	bf00      	nop
 80036e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036e2:	bc08      	pop	{r3}
 80036e4:	469e      	mov	lr, r3
 80036e6:	4770      	bx	lr
